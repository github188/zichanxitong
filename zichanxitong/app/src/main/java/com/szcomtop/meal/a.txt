package com.szcomtop.meal.activity;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.text.format.DateFormat;
import android.text.format.DateUtils;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.nostra13.universalimageloader.core.ImageLoader;
import com.roomorama.caldroid.CalendarHelper;
import com.szcomtop.meal.R;
import com.szcomtop.meal.model.ApplyInfo;
import com.szcomtop.meal.utils.DateUtil;
import com.szcomtop.meal.views.HeadView;

import java.util.Calendar;
import java.util.List;

import hirondelle.date4j.DateTime;

/**
 * Created by wuming on 16/3/24.
 */
public class ApplyDetailActivity extends BaseActivity {


    private HeadView mApplyDetailTitle;
    private ImageView mApplyDetailAvatar;
    private TextView mApplyDetailApplicantName;
    private TextView mApplyDetailApplyStatusTv;
    private TextView mApplyDetailApplicantDepartment;
    private TextView mApplyDetailApplyPeople;
    private TextView mApplyDetailApplyNumber;
    private TextView mApplyDetailEatCanteen;
    private TextView mApplyDetailStopCanteen;
    private TextView mApplyDetailStartTime;
    private TextView mApplyDetailStopTime;
    private TextView mApplyDetailEatDays;
    private TextView mApplyDetailReson;
    private LinearLayout mApplyDetailStatusList;
    private ApplyInfo applyInfo;
    private ImageView mApplyDetailApplyStatusIv;
    private TextView mApplyDinnerTime;

    private void assignViews() {
        mApplyDetailTitle = (HeadView) findViewById(R.id.apply_detail_title);
        mApplyDetailAvatar = (ImageView) findViewById(R.id.apply_detail_avatar);
        mApplyDetailApplicantName = (TextView) findViewById(R.id.apply_detail_applicant_name);
        mApplyDetailApplyStatusTv = (TextView) findViewById(R.id.apply_detail_apply_status_tv);
        mApplyDetailApplyStatusIv = (ImageView) findViewById(R.id.apply_detail_apply_status_iv);
        mApplyDetailApplicantDepartment = (TextView) findViewById(R.id.apply_detail_applicant_department);
        mApplyDetailApplyPeople = (TextView) findViewById(R.id.apply_detail_apply_people);
        mApplyDetailApplyNumber = (TextView) findViewById(R.id.apply_detail_apply_number);
        mApplyDetailEatCanteen = (TextView) findViewById(R.id.apply_detail_eat_canteen);
        mApplyDetailStopCanteen = (TextView) findViewById(R.id.apply_detail_stop_canteen);
        mApplyDetailStartTime = (TextView) findViewById(R.id.apply_detail_start_time);
        mApplyDetailStopTime = (TextView) findViewById(R.id.apply_detail_stop_time);
        mApplyDetailEatDays = (TextView) findViewById(R.id.apply_detail_eat_days);
        mApplyDetailReson = (TextView) findViewById(R.id.apply_detail_reson);
        mApplyDinnerTime = (TextView) findViewById(R.id.apply_detail_dinner_time);
        mApplyDetailStatusList = (LinearLayout) findViewById(R.id.apply_detail_status_list);

    }


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_apply_detail);
        Intent intent = getIntent();
        applyInfo = (ApplyInfo) intent.getSerializableExtra("applyInfo");
        assignViews();
        initView();

    }

    private void initView() {

        mApplyDetailTitle.setHeadParams(HeadView.TYPE_LEFTONLY,this);
        mApplyDetailTitle.setOnHeadClick(this);

        if (applyInfo != null){
            mApplyDetailApplicantName.setText(applyInfo.getName());

            mApplyDetailApplicantDepartment.setText(applyInfo.getOrgName());
            mApplyDetailApplyPeople.setText(applyInfo.getRepastPersonnel());
            mApplyDetailApplyNumber.setText(applyInfo.getPeopleNumber()+"");
            mApplyDetailEatCanteen.setText(applyInfo.getDiningRoom());

            mApplyDinnerTime.setText(applyInfo.getDinner());
            String stopDiningRoom = applyInfo.getStopDiningRoom();
            boolean empty = TextUtils.isEmpty(stopDiningRoom);

            mApplyDetailStopCanteen.setText(empty ? "无":stopDiningRoom);
            mApplyDetailStartTime.setText((String) DateFormat.format("yyyy-MM-dd", applyInfo.getStartTime()));
            mApplyDetailStopTime.setText((String) DateFormat.format("yyyy-MM-dd", applyInfo.getEndTime()));
            mApplyDetailEatDays.setText(applyInfo.getDays()+"天");
            mApplyDetailReson.setText(applyInfo.getReason());
            setStatus(applyInfo.getState(),mApplyDetailApplyStatusTv,mApplyDetailApplyStatusIv);

            List<ApplyInfo.StepListEntity> stepList = applyInfo.getStepList();
            mApplyDetailStatusList.removeAllViews();
            if (stepList == null){
                return;
            }
            for (int i = 0 ; i < stepList.size();i++){

                RelativeLayout statusItem = (RelativeLayout) View.inflate(this, R.layout.app_detail_status_list_item, null);
                if (i == 0){

                    bindStatusItem(true ,statusItem,stepList.get(i));
                }else {
                    bindStatusItem(false ,statusItem,stepList.get(i));

                }

                mApplyDetailStatusList.addView(statusItem);


            }


        }

    }

    private void bindStatusItem(boolean isFirst, RelativeLayout statusItem, ApplyInfo.StepListEntity stepListEntity) {

        ImageView leftIcon = (ImageView) statusItem.findViewById(R.id.status_list_item_left_icon);
        TextView itemName = (TextView) statusItem.findViewById(R.id.status_list_item_name);
        ImageView avatar = (ImageView) statusItem.findViewById(R.id.status_list_item_avatar);
        TextView statusTv = (TextView) statusItem.findViewById(R.id.status_list_item_status_tv);
        ImageView statusIv  = (ImageView) statusItem.findViewById(R.id.status_list_item_status_iv);
        View reasonDivide = statusItem.findViewById(R.id.status_list_item_status_reason_divide);
        TextView reasonTv = (TextView) statusItem.findViewById(R.id.status_list_item_status_reason);

        statusIv.setVisibility(View.INVISIBLE);
        TextView timeTv = (TextView) statusItem.findViewById(R.id.status_list_item_time);
        ImageLoader.getInstance().displayImage(stepListEntity.getAvatar(), avatar);

        itemName.setText(stepListEntity.getName());

        long updateTime = stepListEntity.getUpdateTime();
        boolean today = DateUtils.isToday(updateTime);
        String strDate ;
        if (today){
            strDate =  DateFormat.getTimeFormat(ApplyDetailActivity.this).format(updateTime);
        }else {
            strDate =  DateFormat.getDateFormat(ApplyDetailActivity.this).format(updateTime);

        }
        timeTv.setText(strDate);
        switch (stepListEntity.getState()){
            case 1:
                statusTv.setText("审批中");
                leftIcon.setImageResource(R.drawable.timer_wait_icon);

                break;
            case 2:
                if (isFirst){
                    statusTv.setText("发起申请");
                    leftIcon.setImageResource(R.drawable.timer_create_icon);
                }else {

                    statusTv.setText("已审批(通过)");
                    leftIcon.setImageResource(R.drawable.list_timer_approve_icon);
                }
                break;
            case 3:
                statusTv.setText("已审批(驳回)");
                reasonDivide.setVisibility(View.VISIBLE);
                reasonTv.setVisibility(View.VISIBLE);
                reasonTv.setText("驳回理由:"+stepListEntity.getReason());
                leftIcon.setImageResource(R.drawable.list_timer_reject_icon);
                break;
        }




    }

    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText(applyInfo.getName()+"的申请");
    }



}
package com.szcomtop.meal.activity;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.text.format.DateFormat;
import android.text.format.DateUtils;
import android.view.View;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.nostra13.universalimageloader.core.ImageLoader;
import com.szcomtop.meal.R;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.common.OverAllStorage;
import com.szcomtop.meal.model.ApplyInfo;
import com.szcomtop.meal.views.CommonConfirmDialog;
import com.szcomtop.meal.views.HeadView;
import com.szcomtop.meal.views.SlidingFromTopView;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;

import okhttp3.Call;

/**
 * Created by wuming on 16/3/24.
 */
public class ApproveDetailActivity extends BaseActivity implements View.OnClickListener {


    private HeadView mApproveDetailTitle;
    private ImageView mApproveDetailAvatar;
    private TextView mApproveDetailApplicantName;
    private TextView mApproveDetailApplyStatusTv;
    private TextView mApproveDetailApplicantDepartment;
    private TextView mApproveDetailApplyPeople;
    private TextView mApproveDetailApplyNumber;
    private TextView mApproveDetailEatCanteen;
    private TextView mApproveDetailStopCanteen;
    private TextView mApproveDetailStartTime;
    private TextView mApproveDetailStopTime;
    private TextView mApproveDetailEatDays;
    private TextView mApproveDetailReson;
    private LinearLayout mApproveDetailStatusList;
    private ApplyInfo applyInfo;
    private ImageView mApproveDetailApplyStatusIv;
    private RelativeLayout mApproveDetailAgreeBtn;
    private RelativeLayout mApproveDetailRejectBtn;
    private SlidingFromTopView rejectReasonInputDialog;
    private View mApproveDetailBtnArea;
    private EditText reasonEt;
    private TextView mApplyDinnerTime;

    private void assignViews() {
        mApproveDetailTitle = (HeadView) findViewById(R.id.apply_detail_title);
        mApproveDetailAvatar = (ImageView) findViewById(R.id.apply_detail_avatar);
        mApproveDetailApplicantName = (TextView) findViewById(R.id.apply_detail_applicant_name);
        mApproveDetailApplyStatusTv = (TextView) findViewById(R.id.apply_detail_apply_status_tv);
        mApproveDetailApplyStatusIv = (ImageView) findViewById(R.id.apply_detail_apply_status_iv);
        mApproveDetailApplicantDepartment = (TextView) findViewById(R.id.apply_detail_applicant_department);
        mApproveDetailApplyPeople = (TextView) findViewById(R.id.apply_detail_apply_people);
        mApproveDetailApplyNumber = (TextView) findViewById(R.id.apply_detail_apply_number);
        mApproveDetailEatCanteen = (TextView) findViewById(R.id.apply_detail_eat_canteen);
        mApproveDetailStopCanteen = (TextView) findViewById(R.id.apply_detail_stop_canteen);
        mApproveDetailStartTime = (TextView) findViewById(R.id.apply_detail_start_time);
        mApproveDetailStopTime = (TextView) findViewById(R.id.apply_detail_stop_time);
        mApproveDetailEatDays = (TextView) findViewById(R.id.apply_detail_eat_days);
        mApproveDetailReson = (TextView) findViewById(R.id.apply_detail_reson);
        mApproveDetailStatusList = (LinearLayout) findViewById(R.id.apply_detail_status_list);
        mApproveDetailAgreeBtn = (RelativeLayout) findViewById(R.id.approve_detail_agree_btn);
        mApproveDetailRejectBtn = (RelativeLayout) findViewById(R.id.approve_detail_reject_btn);
        mApproveDetailBtnArea =  findViewById(R.id.approve_detail_btn_area);
        mApplyDinnerTime = (TextView) findViewById(R.id.apply_detail_dinner_time);


    }


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_approve_detail);
        Intent intent = getIntent();
        applyInfo = (ApplyInfo) intent.getSerializableExtra("applyInfo");
        assignViews();
        initView();



    }

    private void initView() {

        mApproveDetailTitle.setHeadParams(HeadView.TYPE_LEFTONLY,this);
        mApproveDetailTitle.setOnHeadClick(this);
        mApproveDetailAgreeBtn.setOnClickListener(this);
        mApproveDetailRejectBtn.setOnClickListener(this);

        Intent intent = getIntent();
        boolean isShowBtn = intent.getBooleanExtra("isShowBtn", true);
        if (isShowBtn){
            mApproveDetailBtnArea.setVisibility(View.VISIBLE);
        }else {
            mApproveDetailBtnArea.setVisibility(View.GONE);
        }


        if (applyInfo != null){
            mApproveDetailApplicantName.setText(applyInfo.getName());

            mApproveDetailApplicantDepartment.setText(applyInfo.getOrgName());
            mApproveDetailApplyPeople.setText(applyInfo.getRepastPersonnel());
            mApproveDetailApplyNumber.setText(applyInfo.getPeopleNumber()+"");
            mApproveDetailEatCanteen.setText(applyInfo.getDiningRoom());
            String dinner = applyInfo.getDinner();
            boolean empty = TextUtils.isEmpty(dinner);
            mApplyDinnerTime.setText(empty ? "无" : dinner);

            mApproveDetailStopCanteen.setText(applyInfo.getStopDiningRoom());
            mApproveDetailStartTime.setText((String) DateFormat.format("yyyy-MM-dd", applyInfo.getStartTime()));
            mApproveDetailStopTime.setText((String) DateFormat.format("yyyy-MM-dd", applyInfo.getEndTime()));
            mApproveDetailEatDays.setText(applyInfo.getDays()+"天");
            mApproveDetailReson.setText(applyInfo.getReason());
            setStatus(applyInfo.getState(),mApproveDetailApplyStatusTv,mApproveDetailApplyStatusIv);

            List<ApplyInfo.StepListEntity> stepList = applyInfo.getStepList();
            mApproveDetailStatusList.removeAllViews();
            if (stepList == null){
                return;
            }
            for (int i = 0 ; i < stepList.size();i++){

                RelativeLayout statusItem = (RelativeLayout) View.inflate(this, R.layout.app_detail_status_list_item, null);
                if (i == 0){

                    bindStatusItem(true,statusItem,stepList.get(i));


                }else {
                    bindStatusItem(false,statusItem,stepList.get(i));

                }
                mApproveDetailStatusList.addView(statusItem);


            }


        }

    }

    private void bindStatusItem(boolean isFirst, RelativeLayout statusItem, ApplyInfo.StepListEntity stepListEntity) {

       ImageView leftIcon = (ImageView) statusItem.findViewById(R.id.status_list_item_left_icon);
        TextView itemName = (TextView) statusItem.findViewById(R.id.status_list_item_name);
        ImageView avatar = (ImageView) statusItem.findViewById(R.id.status_list_item_avatar);
        TextView statusTv = (TextView) statusItem.findViewById(R.id.status_list_item_status_tv);
        ImageView statusIv  = (ImageView) statusItem.findViewById(R.id.status_list_item_status_iv);
        statusIv.setVisibility(View.INVISIBLE);
        TextView timeTv = (TextView) statusItem.findViewById(R.id.status_list_item_time);
        View reasonDivide = statusItem.findViewById(R.id.status_list_item_status_reason_divide);
        TextView reasonTv = (TextView) statusItem.findViewById(R.id.status_list_item_status_reason);
        ImageLoader.getInstance().displayImage(stepListEntity.getAvatar(), avatar);

        itemName.setText(stepListEntity.getName());
        long updateTime = stepListEntity.getUpdateTime();
        boolean today = DateUtils.isToday(updateTime);
        String strDate ;
        if (today){
            strDate =  DateFormat.getTimeFormat(ApproveDetailActivity.this).format(updateTime);
        }else {
            strDate =  DateFormat.getDateFormat(ApproveDetailActivity.this).format(updateTime);

        }
        timeTv.setText(strDate);
        switch (stepListEntity.getState()){
            case 1:
                statusTv.setText("审批中");
                leftIcon.setImageResource(R.drawable.timer_wait_icon);

                break;
            case 2:
                if (isFirst){
                    statusTv.setText("发起申请");
                    leftIcon.setImageResource(R.drawable.timer_create_icon);
                }else {

                    statusTv.setText("已审批(通过)");
                    leftIcon.setImageResource(R.drawable.list_timer_approve_icon);
                }
                break;
            case 3:
                statusTv.setText("已审批(驳回)");
                reasonDivide.setVisibility(View.VISIBLE);
                reasonTv.setVisibility(View.VISIBLE);
                reasonTv.setText("驳回理由:"+stepListEntity.getReason());
                leftIcon.setImageResource(R.drawable.list_timer_reject_icon);
                break;
        }




    }

    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText(applyInfo.getName()+"的申请");
    }


    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.approve_detail_agree_btn:

                final CommonConfirmDialog commonConfirmDialog = new CommonConfirmDialog(ApproveDetailActivity.this);
                commonConfirmDialog.setTitle("请确认");
                commonConfirmDialog.setContent("确认同意请求?");
                commonConfirmDialog.setPositiveButtonListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        commonConfirmDialog.dismiss();
                        doAgree("",applyInfo.getDiningBookingId());
                        //finish();
                    }
                });
                commonConfirmDialog.show();

                break;
            case R.id.approve_detail_reject_btn:

                doReject();

                break;

            case R.id.reject_reason_input_cancel_btn:
                rejectReasonInputDialog.dismiss();
                break;
            case R.id.reject_reason_input_ok_btn:
                String reason = reasonEt.getText().toString();
                if (TextUtils.isEmpty(reason)){
                    Toast.makeText(this,"请输入驳回理由",0).show();
                    return;
                }
                rejectReasonInputDialog.dismiss();
                doActuallyReject(applyInfo.getDiningBookingId(), reason);
                break;
            default:
                break;
        }
    }



    private void doActuallyReject(String bookingId,String reason) {

        String url =String.format( Consts.SERVER_PREFIX +"/mealbook/api/booking/back");

        OkHttpUtils
                .post()
                .url(url)
                .addParams("userId",OverAllStorage.getInstance().get("openId").toString())
                .addParams("diningBookingId",bookingId)
                .addParams("reason",reason)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e) {

                    }

                    @Override
                    public void onResponse(String response) {

                        JSONObject jsonObject = null;
                        try {

                            jsonObject = new JSONObject(response);

                            int state = (int) jsonObject.get("state");
                            if (state == 0){

                                Toast.makeText(ApproveDetailActivity.this,"驳回成功",0).show();
                                finish();

                            }else {
                                Toast.makeText(ApproveDetailActivity.this,"驳回失败",0).show();

                            }

                        } catch (JSONException e) {

                            Toast.makeText(ApproveDetailActivity.this,"驳回失败",0).show();

                        }


                    }
                });

    }

    private void doAgree(String userId,String bookingId) {
        String url =String.format( Consts.SERVER_PREFIX +"/mealbook/api/booking/pass");

       OkHttpUtils
                .post()
                .url(url)
               .addParams("userId", OverAllStorage.getInstance().get("openId").toString())
               .addParams("diningBookingId",bookingId)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e) {
                        Toast.makeText(ApproveDetailActivity.this,"审批失败",0).show();

                    }

                    @Override
                    public void onResponse(String response) {

                        JSONObject jsonObject = null;
                        try {

                            jsonObject = new JSONObject(response);

                            int state = (int) jsonObject.get("state");
                            if (state == 0){

                                Toast.makeText(ApproveDetailActivity.this,"审批成功",0).show();
                                finish();

                            }else {
                                Toast.makeText(ApproveDetailActivity.this,"审批失败",0).show();

                            }

                        } catch (JSONException e) {

                            Toast.makeText(ApproveDetailActivity.this,"审批失败",0).show();

                        }


                    }
                });


    }

    private void doReject() {
        if ( rejectReasonInputDialog  == null){
            rejectReasonInputDialog = new SlidingFromTopView(this);
            FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);
            layoutParams.topMargin = (int) getResources().getDimension(R.dimen.title_layout_height);
            addContentView(rejectReasonInputDialog,layoutParams);
            View rejectReasonInput = View.inflate(this, R.layout.reject_reson_input_view, null);

           reasonEt = (EditText) rejectReasonInput.findViewById(R.id.reject_reason_input_et);
            rejectReasonInput.findViewById(R.id.reject_reason_input_cancel_btn).setOnClickListener(this);
            rejectReasonInput.findViewById(R.id.reject_reason_input_ok_btn).setOnClickListener(this);
            rejectReasonInputDialog.setView(rejectReasonInput);
        }
        rejectReasonInputDialog.show();
    }
}
package com.szcomtop.meal.activity;

import android.annotation.TargetApi;
import android.graphics.Color;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import com.szcomtop.meal.R;
import com.szcomtop.meal.views.HeadView;

/**
 * Created by wuming on 16/3/23.
 */
public class BaseActivity extends FragmentActivity implements HeadView.OnHeadClickListener ,HeadView.OnHeadInitListener {

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        requestWindowFeature(Window.FEATURE_NO_TITLE);

    }

    @Override
    public void OnCenterTVClick(View v) {

    }

    @Override
    public void OnLeftBtnClick(View v) {

        finish();
    }

    @Override
    public void OnRightBtnClick(View v) {

    }

    @Override
    public void OnRightIBtnClick(View v) {

    }

    @Override
    public void initCenterTv(TextView cTv) {

    }

    @Override
    public void initLeftBtn(ImageButton lBtn) {

    }

    @Override
    public void initRightBtn(Button rBtn) {

    }

    @Override
    public void initRightIBtn(ImageButton ibtn) {

    }

    public void setStatus(int status, TextView statusTv, ImageView statusIv) {

        switch (status) {
            case 1:

                statusTv.setText("[审批中]");
                statusIv.setVisibility(View.INVISIBLE);

                break;

            case 2:
                statusTv.setText("已审批(通过)");
                statusIv.setImageResource(R.drawable.btn_approve_icon);
                break;

            case 3:
                statusTv.setText("已审批(驳回)");
                statusIv.setImageResource(R.drawable.btn_reject_icon);
                break;
            case 4:
                statusTv.setText("[过期]");
                statusIv.setVisibility(View.INVISIBLE);
                break;


            default:
//                statusTv.setText("[审批中]");
//                statusIv.setVisibility(View.INVISIBLE);

                break;

        }


    }


}
package com.szcomtop.meal.activity;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v4.app.FragmentTransaction;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.roomorama.caldroid.CaldroidFragment;
import com.roomorama.caldroid.CaldroidListener;
import com.szcomtop.meal.R;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

@SuppressLint("SimpleDateFormat")
public class CaldroidSampleActivity extends BaseActivity {
    private CaldroidFragment caldroidFragment;

    private void setCustomResourceForDates() {
        Calendar cal = Calendar.getInstance();

        // Min date is last 7 days
        cal.add(Calendar.DATE, -7);
        Date blueDate = cal.getTime();

        // Max date is next 7 days
        cal = Calendar.getInstance();
        cal.add(Calendar.DATE, 7);
        Date greenDate = cal.getTime();

        if (caldroidFragment != null) {
           // ColorDrawable blue = new ColorDrawable(getResources().getColor(R.color.blue));
            ColorDrawable green = new ColorDrawable(Color.GREEN);
            //caldroidFragment.setBackgroundDrawableForDate(blue, blueDate);
            caldroidFragment.setBackgroundDrawableForDate(green, greenDate);
            caldroidFragment.setTextColorForDate(R.color.white, blueDate);
            caldroidFragment.setTextColorForDate(R.color.white, greenDate);
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_caldroid_sample);

        final SimpleDateFormat formatter = new SimpleDateFormat("dd MMM yyyy");

        // Setup caldroid fragment
        // **** If you want normal CaldroidFragment, use below line ****
        caldroidFragment = new CaldroidFragment();

        // //////////////////////////////////////////////////////////////////////
        // **** This is to show customized fragment. If you want customized
        // version, uncomment below line ****
	 //caldroidFragment = new CaldroidSampleCustomFragment();

        // Setup arguments

        // If Activity is created after rotation
        if (savedInstanceState != null) {
            caldroidFragment.restoreStatesFromKey(savedInstanceState,
                    "CALDROID_SAVED_STATE");
        }
        // If activity is created from fresh
        else {
            Bundle args = new Bundle();
            Calendar cal = Calendar.getInstance();
            args.putInt(CaldroidFragment.MONTH, cal.get(Calendar.MONTH) + 1);
            args.putInt(CaldroidFragment.YEAR, cal.get(Calendar.YEAR));
            args.putBoolean(CaldroidFragment.ENABLE_SWIPE, true);
            args.putBoolean(CaldroidFragment.SIX_WEEKS_IN_CALENDAR, true);

            // Uncomment this to customize startDayOfWeek
            // args.putInt(CaldroidFragment.START_DAY_OF_WEEK,
            // CaldroidFragment.TUESDAY); // Tuesday

            // Uncomment this line to use Caldroid in compact mode
            // args.putBoolean(CaldroidFragment.SQUARE_TEXT_VIEW_CELL, false);

            // Uncomment this line to use dark theme
//            args.putInt(CaldroidFragment.THEME_RESOURCE, com.caldroid.R.style.CaldroidDefaultDark);

            caldroidFragment.setArguments(args);
        }

        setCustomResourceForDates();

        // Attach to the activity
        FragmentTransaction t = getSupportFragmentManager().beginTransaction();
        t.replace(R.id.calendar1, caldroidFragment);
        t.commit();

        // Setup listener
        final CaldroidListener listener = new CaldroidListener() {

            @Override
            public void onSelectDate(Date date, View view) {
                Toast.makeText(getApplicationContext(), formatter.format(date),
                        Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onChangeMonth(int month, int year) {
                String text = "month: " + month + " year: " + year;
                Toast.makeText(getApplicationContext(), text,
                        Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onLongClickDate(Date date, View view) {
                Toast.makeText(getApplicationContext(),
                        "Long click " + formatter.format(date),
                        Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onCaldroidViewCreated() {
                if (caldroidFragment.getLeftArrowButton() != null) {
                    Toast.makeText(getApplicationContext(),
                            "Caldroid view is created", Toast.LENGTH_SHORT)
                            .show();
                }
            }

        };

        // Setup Caldroid
        caldroidFragment.setCaldroidListener(listener);


    }

    /**
     * Save current states of the Caldroid here
     */
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        // TODO Auto-generated method stub
        super.onSaveInstanceState(outState);

        if (caldroidFragment != null) {
            caldroidFragment.saveStatesToKey(outState, "CALDROID_SAVED_STATE");
        }

    }

}
package com.szcomtop.meal.activity;

import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.szcomtop.meal.R;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.model.Carteen;
import com.szcomtop.meal.views.CommonDialog;
import com.szcomtop.meal.views.HeadView;
import com.szcomtop.meal.views.SearchBar;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import okhttp3.Call;




/**
 * Created by wuming on 2016/4/18.
 */
public class CanteenListActivity extends BaseActivity implements AdapterView.OnItemClickListener, ExpandableListView.OnChildClickListener, TextWatcher, View.OnClickListener {

    private HeadView title;
    private ExpandableListView expandableListView;

    private int mCurrentGroupPosition = -1;
    private int mCurrentChildPosition = -1;
    private BaseExpandableListAdapter expandableListAdapter;

    List<Carteen> carteens ;
    private SearchBar searchbar ;
    private LinearLayout noneArea;
    private View noneGou;
    private CommonDialog commonDialog;
    private boolean showWu;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_carteen_list);
        findView();

        getData();


        initView();

      //  initView();


    }

    private void getData() {

        if (commonDialog == null){

            commonDialog = new CommonDialog(this);
            commonDialog.setText("更新数据");
        }
        commonDialog.show();

        String url = Consts.SERVER_PREFIX +"/mealbook/api/diningroom/get_room_all?keyword=";
        OkHttpUtils
                .post()
                .url(url)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e) {
                        Log.i("wuming","diningroom response:"+e.toString());
                    }

                    @Override
                    public void onResponse(String response) {



                        if (commonDialog != null && commonDialog.isShowing()){
                            commonDialog.dismiss();
                        }
                        Log.i("wuming","response:"+response);

                        try {
                            JSONObject jsonObject = new JSONObject(response);
                            int state = (int) jsonObject.get("state");
                            if (state == 0){
                                //成功
                               JSONArray data = (JSONArray) jsonObject.get("data");
                                String dataString = data.toString();
                                if (!TextUtils.isEmpty(dataString)){
                                    Gson gson = new Gson();
                                    carteens  = gson.fromJson(dataString, new TypeToken<List<Carteen>>() {
                                    }.getType());

                                    if (carteens != null && carteens.size() != 0){


                                        setupListview();


                                    }

                                    Log.i("wuming","size:"+carteens.size()+"");


                                }


                            }else{
                                //失败
                            }


                        } catch (JSONException e) {
                            e.printStackTrace();
                        }


                    }
                });


    }


    private void initView() {
        title.setHeadParams(HeadView.TYPE_LRIGHTBTN,this);
        title.setOnHeadClick(this);

        searchbar.addTextChangedListener(this);
        Intent intent = getIntent();
        showWu = intent.getBooleanExtra("showWu", true);

        noneArea = (LinearLayout) findViewById(R.id.carteen_list_none);
        noneArea.setOnClickListener(this);
        noneGou  = noneArea.findViewById(R.id.carteen_list_child_gou_iv);
        if (!showWu){
            noneArea.setVisibility(View.GONE);
        }

    }

    private void setupListview() {
        expandableListAdapter = new BaseExpandableListAdapter(){

             @Override
             public int getGroupCount() {
                 return carteens.size();
             }

             @Override
             public int getChildrenCount(int i) {
                 return carteens.get(i).getRoomList().size();
             }

             @Override
             public Object getGroup(int i) {
                 return carteens.get(i);
             }

             @Override
             public Object getChild(int i, int i1) {
                 return carteens.get(i).getRoomList().get(i1);
             }

             @Override
             public long getGroupId(int i) {
                 return i;
             }

             @Override
             public long getChildId(int i, int i1) {
                 return i1;
             }

             @Override
             public boolean hasStableIds() {
                 return true;
             }

             @Override
             public View getGroupView(int groupPosition, boolean isExpanded,
                                      View convertView, ViewGroup parent) {

                 if (convertView == null) {

                     convertView = View.inflate(CanteenListActivity.this, R.layout.carteen_list_parent, null);
                 }
 //
                 TextView textView = (TextView) convertView.findViewById(R.id.carteen_list_parent_tv);
                 textView.setText(carteens.get(groupPosition).getName());


                ImageView arrow = (ImageView) convertView.findViewById(R.id.carteen_list_parent_arrow);
                 if (isExpanded) {
                             arrow.setImageResource(R.drawable.list_show__righticon);
                 } else {
                     arrow.setImageResource(R.drawable.list_hide_downward_icon);
                 }
                 return convertView;
             }

             @Override
             public View getChildView(int groupPosition, int childPosition,
                                      boolean isLastChild, View convertView, ViewGroup parent) {
                 if (convertView == null) {

                     convertView = View.inflate(CanteenListActivity.this,R.layout.carteen_list_child, null);
                 }
                 if (groupPosition != mCurrentGroupPosition || childPosition != mCurrentChildPosition){

                     convertView.findViewById(R.id.carteen_list_child_gou_iv).setVisibility(View.INVISIBLE);
                 }else{
                     convertView.findViewById(R.id.carteen_list_child_gou_iv).setVisibility(View.VISIBLE);

                 }
                 TextView textview = (TextView) convertView.findViewById(R.id.carteen_list_child_tv);
                 textview.setText(carteens.get(groupPosition).getRoomList().get(childPosition).getRoomName());
                 return convertView;
             }

             @Override
             public boolean isChildSelectable(int i, int i1) {
                 return true;
             }
         };
        expandableListView.setAdapter(expandableListAdapter);
        expandableListView.setOnChildClickListener(this);
    }

    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText("食堂列表");
    }

    @Override
    public void initRightBtn(Button rBtn) {
        super.initRightBtn(rBtn);
        rBtn.setText("完成");
    }

    @Override
    public void OnLeftBtnClick(View v) {
        super.OnLeftBtnClick(v);
        onBackPressed();
    }

    @Override
    public void OnRightBtnClick(View v) {
        super.OnRightBtnClick(v);
      onBackPressed();
    }

    @Override
    public void onBackPressed() {

        if (!showWu){
            if (mCurrentGroupPosition == -1){
                Toast.makeText(this,"请选择食堂",0).show();
                return;
            }
        }

        Intent intent = getIntent();
        intent.putExtra("selectCarteen",getSelectCarteen());
        setResult(0,intent);
        super.onBackPressed();
    }

    private Carteen.RoomListBean getSelectCarteen(){
        if (mCurrentGroupPosition == -1){
            return   null;
        }else{
            Carteen carteen = carteens.get(mCurrentGroupPosition);
            List<Carteen.RoomListBean> roomList = carteen.getRoomList();

            if (roomList != null){
                return  roomList.get(mCurrentChildPosition);
            }else {
                return  null;
            }

        }
    }

    private void findView() {
        title = (HeadView) findViewById(R.id.carteen_list_title);
        expandableListView = (ExpandableListView) findViewById(R.id.carteen_list_expanable_list);
        searchbar = (SearchBar) findViewById(R.id.carteen_list_search_bar);
    }

    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {

    }

    @Override
    public boolean onChildClick(ExpandableListView expandableListView, View view, int groupPosition, int childPosition, long l) {


        View gou = view.findViewById(R.id.carteen_list_child_gou_iv);
        noneGou.setVisibility(View.INVISIBLE);
        if (gou.isShown()){
           // gou.setVisibility(View.INVISIBLE);
            mCurrentGroupPosition = -1 ;
            mCurrentChildPosition = -1 ;

        }else {

          //  gou.setVisibility(View.VISIBLE);
            mCurrentGroupPosition = groupPosition ;
            mCurrentChildPosition = childPosition ;
        }
        //mCurrentChildItem = view ;

        expandableListAdapter.notifyDataSetChanged();

        return true;
    }

    @Override
    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

    }

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {

        String aa = s.toString();

        if (carteens == null){
            return;
        }

        if(TextUtils.isEmpty(aa)){
            for (int i = 0; i < carteens.size(); i++) {
                expandableListView.collapseGroup(i);
            }
            return;
        }

        Pattern p = Pattern.compile(aa);
        for (int i = 0; i < carteens.size(); i++) {
            expandableListView.collapseGroup(i);
        }

        for (int i = 0; i < carteens.size(); i++) {
            Carteen carteen = carteens.get(i);
            List<Carteen.RoomListBean> roomList = carteen.getRoomList();
            for (int j = 0 ; j<roomList.size() ;j ++){

                Matcher matcher = p.matcher(carteen.getName()+roomList.get(j).getRoomName());
                if (matcher.find()) {

                    expandableListView.expandGroup(i);

                }
            }

        }



    }

    @Override
    public void afterTextChanged(Editable editable) {

    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){

            case R.id.carteen_list_none:
                if(noneGou.isShown()){
                    noneGou.setVisibility(View.INVISIBLE);
                }else {
                    noneGou.setVisibility(View.VISIBLE);
                }

                mCurrentChildPosition = -1 ;
                mCurrentGroupPosition = -1 ;
                if (expandableListAdapter != null){

                    expandableListAdapter.notifyDataSetChanged();
                }


        }

    }
}
package com.szcomtop.meal.activity;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.szcomtop.meal.R;
import com.szcomtop.meal.common.CommonAdapter;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.common.ViewHolder;
import com.szcomtop.meal.model.ApplyInfo;
import com.szcomtop.meal.model.Response;
import com.szcomtop.meal.model.UserInfo;
import com.szcomtop.meal.views.HeadView;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import java.util.List;

import okhttp3.Call;



/**
 * Created by wuming on 16/4/22.
 */
public class ChargerListActivity  extends BaseActivity implements AdapterView.OnItemClickListener {


    private HeadView mChergerListTitle;
    private ListView mChergerListListview;
    private List<UserInfo> data;
    private UserInfo mSelectCharger;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_charger_list);

        assignViews();
        initView();
        feachData();
    }



    private void assignViews() {
        mChergerListTitle = (HeadView) findViewById(R.id.cherger_list_title);
        mChergerListListview = (ListView) findViewById(R.id.cherger_list_listview);
    }


    private void initView() {

        mChergerListTitle.setHeadParams(HeadView.TYPE_LEFTONLY,this);
        mChergerListTitle.setOnHeadClick(this);

    }


    private  void  feachData(){

        String url =String.format( Consts.SERVER_PREFIX +"/mealbook/api/user/get_director");

       OkHttpUtils
                .post()
               // .addParams("pageNumber", pager + "")
              //  .addParams("pageSize", PAGE_SIZE)
                .url(url)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e) {

                    }

                    @Override
                    public void onResponse(String response) {


                        try {

                            Gson gson = new Gson();
                            Response<UserInfo> res = gson.fromJson(response, new TypeToken<Response<UserInfo>>() {
                            }.getType());
                            int state = res.getState();
                            if (state == 0) {

                               data = res.getData();
                                if (data != null || data.size() != 0){

                                    CommonAdapter<UserInfo> commonAdapter = new CommonAdapter<UserInfo>(ChargerListActivity.this, data, R.layout.charger_list_item) {

                                        @Override
                                        public void convert(ViewHolder holder, UserInfo userInfo) {

                                            holder.setText(R.id.charger_list_item_name,userInfo.getName());

                                        }
                                    };
                                    mChergerListListview.setAdapter(commonAdapter);
                                    mChergerListListview.setOnItemClickListener(ChargerListActivity.this);


                                }else {
                                    //失败
                                }


                            }

                        }catch (Exception e){
                         //失败


                        }



                    }
                });

    }


    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText("选择审批主管");
    }

    @Override
    public void OnLeftBtnClick(View v) {
        onBackPressed();
    }

    @Override
    public void onBackPressed() {

        Intent intent = getIntent();
        intent.putExtra("charger",mSelectCharger);
        setResult(0,intent);

        super.onBackPressed();

    }

    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {

        mSelectCharger = data.get(i);
        onBackPressed();

    }
}
package com.szcomtop.meal.activity;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageButton;
import android.widget.TextView;

import com.szcomtop.meal.R;
import com.szcomtop.meal.views.HeadView;
import com.szcomtop.meal.views.SlidingFromTopView;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Set;

public class MainActivity extends BaseActivity implements View.OnClickListener {


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initView();

    }



    private void initView() {
       HeadView title = (HeadView) findViewById(R.id.main_title);
        title.setHeadParams(HeadView.TYPE_LRIGHTIBTN,this);
        title.setOnHeadClick(this);

        findViewById(R.id.main_me_strat_applys).setOnClickListener(this);
        findViewById(R.id.main_me_check_applys).setOnClickListener(this);



    }

    @Override
    public void initLeftBtn(ImageButton lBtn) {
        super.initLeftBtn(lBtn);
    }

    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText("跨区用餐");
    }


    @Override
    public void OnRightIBtnClick(View v) {
        super.OnRightIBtnClick(v);
        startActivity(new Intent(this,NewApplyActivity.class));


    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.main_me_strat_applys:
                startActivity(new Intent(this,MyApplysActivity.class));
                break;

            case R.id.main_me_check_applys:
                startActivity(new Intent(this,MyApproveApplysActivity.class));
                break;
        }
    }
}
package com.szcomtop.meal.activity;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.TextView;

import com.szcomtop.meal.R;
import com.szcomtop.meal.fragment.MyApplysFragment;
import com.szcomtop.meal.views.HeadView;

public class MyApplysActivity extends BaseActivity{


    private FrameLayout frame;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my_applys);

        initView();

    }

    private void initView() {
       HeadView title = (HeadView) findViewById(R.id.my_applys_title);
        title.setHeadParams(HeadView.TYPE_LRIGHTIBTN,this);
        title.setOnHeadClick(this);

        frame = (FrameLayout) findViewById(R.id.my_applys_frame);
        setDefaultFragment();



    }

    @Override
    public void OnRightIBtnClick(View v) {
        super.OnRightIBtnClick(v);
        startActivity(new Intent(this,NewApplyActivity.class));
        //startActivity(new Intent(this,MyApplysActivity.class));

    }

    private void setDefaultFragment() {
        FragmentManager manager = getSupportFragmentManager();
        FragmentTransaction transaction = manager.beginTransaction();

        MyApplysFragment myApplysFragment = new MyApplysFragment();
        transaction.replace(R.id.my_applys_frame, myApplysFragment);
        transaction.commit();

    }

    @Override
    public void initLeftBtn(ImageButton lBtn) {
        super.initLeftBtn(lBtn);
    }

    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText("我的申请");
    }

}
package com.szcomtop.meal.activity;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.szcomtop.meal.R;
import com.szcomtop.meal.fragment.MyApplysFragment;
import com.szcomtop.meal.fragment.MyApprovesFragment;
import com.szcomtop.meal.views.HeadView;


/**
 * Created by wuming on 16/3/25.
 */
public class MyApproveApplysActivity extends BaseActivity implements View.OnClickListener {

    private HeadView mApproveTitle;
    private LinearLayout mApproveMyApplys;
    private TextView mApproveMyApplysTv;
    private LinearLayout mApproveWaitApproved;
    private TextView mApproveWaitApprovedTv;
    private ViewPager mApproveViewpager;
    private int mCurrentPosition ;
    private TextView redDot;
    private FragmentPagerAdapter adapter;
    private MyApplysFragment myApplysFragment;
    private MyApprovesFragment myApprovesFragment;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_approve);
        assignViews();
        initView();
    }


    public void setRedDot(String s){
        redDot.setText(s);
    }




    private void assignViews() {
        mApproveTitle = (HeadView) findViewById(R.id.approve_title);
        mApproveMyApplys = (LinearLayout) findViewById(R.id.approve_my_applys);
        mApproveMyApplysTv = (TextView) findViewById(R.id.approve_my_applys_tv);
        mApproveWaitApproved = (LinearLayout) findViewById(R.id.approve_wait_to_approved);
        mApproveWaitApprovedTv = (TextView) findViewById(R.id.approve_wait_to_approved_tv);
        mApproveViewpager = (ViewPager) findViewById(R.id.approve_viewpager);
        redDot = (TextView)findViewById(R.id.approve_wait_to_approved_red_dot);
    }



    private void initView() {

        mApproveTitle.setHeadParams(HeadView.TYPE_LRIGHTIBTN,this);
        mApproveTitle.setOnHeadClick(this);

        mApproveWaitApproved.setOnClickListener(this);
        mApproveMyApplys.setOnClickListener(this);

         adapter = new FragmentPagerAdapter(getSupportFragmentManager()) {
            @Override
            public Fragment getItem(int position) {

                if (position == 0) {
                     myApplysFragment = new MyApplysFragment();
                    return myApplysFragment;

                }

              myApprovesFragment = new MyApprovesFragment();
                return myApprovesFragment;

            }

            @Override
            public int getCount() {
                return 2;
            }


        };
        mApproveViewpager.setAdapter(adapter);

        mApproveViewpager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                if (position == 0){
                    myApplysFragment.onSelected();
                }else {
                    myApprovesFragment.onSelected();
                }


            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });

    }

    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText("用餐审批");
    }

    @Override
    public void initRightBtn(Button rBtn) {
        super.initRightBtn(rBtn);
        rBtn.setText("统计");
    }

    @Override
    public void OnRightBtnClick(View v) {
        super.OnRightBtnClick(v);
        startActivity(new Intent(this,StatisticsActivity.class));
    }

    @Override
    public void OnRightIBtnClick(View v) {
        super.OnRightIBtnClick(v);
        startActivity(new Intent(this,NewApplyActivity.class));
        //startActivity(new Intent(this,TransparentActivity.class));

    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.approve_my_applys:
                switchTo (0);
                mApproveTitle.setHeadParams(HeadView.TYPE_LRIGHTIBTN,this);

                break;
            case R.id.approve_wait_to_approved:
                switchTo (1);
                mApproveTitle.setHeadParams(HeadView.TYPE_LRIGHTBTN,this);


                break;
        }
    }

    private void switchTo(int position) {

        if (position == mCurrentPosition){
            return;
        }
        if (mCurrentPosition == 0){

            mApproveMyApplysTv.setTextColor(Color.parseColor("#666666"));
            mApproveWaitApprovedTv.setTextColor(Color.parseColor("#2b9af7"));
            mApproveViewpager.setCurrentItem(1);
            mCurrentPosition = 1 ;
        }else{

            mApproveWaitApprovedTv.setTextColor(Color.parseColor("#666666"));
            mApproveMyApplysTv.setTextColor(Color.parseColor("#2b9af7"));
            mApproveViewpager.setCurrentItem(0);
            mCurrentPosition = 0 ;
        }
    }
}
package com.szcomtop.meal.activity;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.text.TextUtils;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.roomorama.caldroid.CaldroidFragment;
import com.roomorama.caldroid.CaldroidListener;
import com.roomorama.caldroid.CalendarHelper;
import com.roomorama.caldroid.CellView;
import com.szcomtop.meal.R;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.common.MyAnimatorListenerAdapter;
import com.szcomtop.meal.common.OverAllStorage;
import com.szcomtop.meal.model.ApplyApply;
import com.szcomtop.meal.model.Carteen;
import com.szcomtop.meal.model.QixinUser;
import com.szcomtop.meal.model.UserInfo;
import com.szcomtop.meal.utils.ViewUtils;
import com.szcomtop.meal.views.CircleImageView;
import com.szcomtop.meal.views.CommonDialog;
import com.szcomtop.meal.views.DateWheelView;
import com.szcomtop.meal.views.HeadView;
import com.szcomtop.meal.views.OptionItemView;
import com.szcomtop.meal.views.SlidingFromTopView;
import com.szcomtop.meal.views.SwitchView;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import hirondelle.date4j.DateTime;
import okhttp3.Call;

/**
 * Created by wuming on 16/3/24.
 */
public class NewApplyActivity extends FragmentActivity implements View.OnClickListener, HeadView.OnHeadInitListener, HeadView.OnHeadClickListener, SwitchView.OnStateChangedListener {

    private static final int HAVE_CANTEEN = 11;
    private static final int STOP_CANTEEN = 22;
    private static final int TOGETHER_PEOPLE = 33;
    private static final int CHARGER = 44;


    private CaldroidFragment caldroidFragment;
    private View shadow;
    private View mcurrentCell;
    //  private TextView mNewApplyCalendaCancel;
    //   private TextView mNewApplyCalendaOk;
    private boolean isSelectStartDate;
    //   private TextView mNewApplyCalendaTv;


    private HeadView mNewApplyTitle;
    private OptionItemView mNewApplyEntourage;
    private OptionItemView mNewApplyHaveCanteen;
    private OptionItemView mNewApplyStopCanteen;
    private OptionItemView mNewApplyLunchDate;
    private OptionItemView mNewApplyLunchDays;
    private SwitchView mWhetherDinnerSwitch;
    private OptionItemView mNewApplyDinnerDate;
    private OptionItemView mNewApplyDinnerDays;
    private TextView mNewApplyReason;
    private EditText mNewApplyReasonEt;
    private CircleImageView mNewApplyApproverAvatar;
    private TextView mNewApplyApproverName;
    private LinearLayout carlendaArea;
    private TextView mNewApplyCarlendaTv;
    private FrameLayout mCalendar;
    private TextView mNewApplyCarlendaCancelBtn;
    private TextView mNewApplyCarlendaOkBtn;
    private Date mcurrentDate;
    private Date mStartDate;
    private Date mEndDate;
    private boolean isLunch;
    private Carteen.RoomListBean mApproveBean;
    private TextView commitBtn;
    private String togetherPeople;
    private RelativeLayout chargerItem;
    private TextView chargerName;
    private int mcurrentYear;
    private int mcurrentMonth;
    private ArrayList<DateTime> selectedDates;
    private String dinnerNum;
    private List<QixinUser> qixinUsersss;
    private UserInfo selectCharger;
    private String otherPeople = "";
    private Carteen.RoomListBean stopCarteen;


    private void assignViews() {


        mNewApplyTitle = (HeadView) findViewById(R.id.new_apply_title);
        mNewApplyEntourage = (OptionItemView) findViewById(R.id.new_apply_entourage);
        mNewApplyHaveCanteen = (OptionItemView) findViewById(R.id.new_apply_have_canteen);
        mNewApplyStopCanteen = (OptionItemView) findViewById(R.id.new_apply_stop_canteen);
        mNewApplyLunchDate = (OptionItemView) findViewById(R.id.new_apply_lunch_date);
        mNewApplyLunchDays = (OptionItemView) findViewById(R.id.new_apply_lunch_days);
        mWhetherDinnerSwitch = (SwitchView) findViewById(R.id.whether_dinner_switch);
        mNewApplyDinnerDate = (OptionItemView) findViewById(R.id.new_apply_dinner_date);
        mNewApplyDinnerDays = (OptionItemView) findViewById(R.id.new_apply_dinner_days);
        mNewApplyReason = (TextView) findViewById(R.id.new_apply_reason);
        mNewApplyReasonEt = (EditText) findViewById(R.id.new_apply_reason_et);
        mNewApplyApproverName = (TextView) findViewById(R.id.new_apply_approver_name);
        mNewApplyApproverAvatar = (CircleImageView) findViewById(R.id.new_apply_approver_avatar);
        mNewApplyApproverName = (TextView) findViewById(R.id.new_apply_approver_name);
        shadow = findViewById(R.id.new_apply_shadow);
        carlendaArea = (LinearLayout) findViewById(R.id.new_apply_carlenda_area);
        mNewApplyCarlendaTv = (TextView) findViewById(R.id.new_apply_carlenda_tv);
        mCalendar = (FrameLayout) findViewById(R.id.calendar);
        mNewApplyCarlendaCancelBtn = (TextView) findViewById(R.id.new_apply_carlenda_cancel_btn);
        mNewApplyCarlendaOkBtn = (TextView) findViewById(R.id.new_apply_carlenda_ok_btn);

        commitBtn = (TextView) findViewById(R.id.new_apply_commit_btn);

        chargerItem = (RelativeLayout) findViewById(R.id.new_apply_charger_item);

        chargerName = (TextView) findViewById(R.id.new_apply_charger_name);


    }

    @Override
    public void onBackPressed() {
        if (mCalendar.isShown()) {
            dismissCalendar();
            return;
        }
        super.onBackPressed();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_new_apply);
        assignViews();
        initView();
        getTimeScope();
    }

    private void initView() {
        mNewApplyTitle.setHeadParams(HeadView.TYPE_LEFTONLY, this);
        mNewApplyTitle.setOnHeadClick(this);
        mNewApplyEntourage.setOnClickListener(this);
        mNewApplyHaveCanteen.setOnClickListener(this);
        mNewApplyStopCanteen.setOnClickListener(this);

        mNewApplyCarlendaCancelBtn.setOnClickListener(this);
        mNewApplyCarlendaOkBtn.setOnClickListener(this);


        mNewApplyLunchDate.setOnClickListener(this);
        mNewApplyDinnerDate.setOnClickListener(this);
        mWhetherDinnerSwitch.setOnStateChangedListener(this);

        chargerItem.setOnClickListener(this);


        commitBtn.setOnClickListener(this);


        shadow.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                if (!ViewUtils.isTouchInView(motionEvent, carlendaArea)) {
                    dismissCalendar();

                }
                return true;
            }
        });

        initCaladerFragment();

    }

    private void initCaladerFragment() {
        final SimpleDateFormat formatter = new SimpleDateFormat("dd MMM yyyy");

        caldroidFragment = new CaldroidFragment();
        Bundle args = new Bundle();
        Calendar cal = Calendar.getInstance();
        args.putInt(CaldroidFragment.MONTH, cal.get(Calendar.MONTH) + 1);
        args.putInt(CaldroidFragment.YEAR, cal.get(Calendar.YEAR));
        args.putBoolean(CaldroidFragment.ENABLE_SWIPE, true);
        args.putBoolean(CaldroidFragment.SIX_WEEKS_IN_CALENDAR, true);
        caldroidFragment.setMinDate(new Date());


        caldroidFragment.setArguments(args);

        // setCustomResourceForDates();

        // Attach to the activity
        FragmentTransaction t = getSupportFragmentManager().beginTransaction();
        t.replace(R.id.calendar, caldroidFragment);
        t.commit();


        final CaldroidListener listener = new CaldroidListener() {

            @Override
            public void onSelectDate(Date date, View view) {


                if (isLunch){
                    if (isSelectStartDate) {


                        Calendar cal = Calendar.getInstance();
                        cal.setTime(date);

                        if(cal.get(Calendar.DAY_OF_WEEK)==Calendar.SATURDAY||cal.get(Calendar.DAY_OF_WEEK)==Calendar.SUNDAY)
                        {
                            return;
                        }


                        if (mEndDate != null) {

                            int daysOfTwo = daysOfTwo(date, mEndDate);
                            if (daysOfTwo <= 0) {
                                caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.cell_bg), mEndDate);
                                mEndDate = null;
                            }


                        }

                        if (mStartDate != null && mStartDate != date) {

                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.cell_bg), mStartDate);
                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.blue_round_bg), date);

                            mStartDate = date;

                        } else if (mStartDate == date) {
                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.cell_bg), mStartDate);
                            mStartDate = null;
                        } else {

                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.blue_round_bg), date);
                            mStartDate = date;

                        }

                        caldroidFragment.refreshView();

                    } else {


                        if (mStartDate != null) {
                            if (daysOfTwo(mStartDate, date) < 0) {
                                Toast.makeText(getApplicationContext(), "结束时间必须大于开始时间", 0).show();
                                return;
                            }
                        }


                        if (mEndDate != null && mEndDate != date) {

                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.cell_bg), mEndDate);
                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.red_round_bg), date);

                            mEndDate = date;

                        } else if (mEndDate == date) {
                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.cell_bg), mEndDate);
                            mEndDate = null;
                        } else {

                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.red_round_bg), date);
                            mEndDate = date;

                        }

                        caldroidFragment.refreshView();
                    }
                }else {
                    //如果是晚餐
                    ArrayList<DateTime> selectedDates = caldroidFragment.getSelectedDates();
                    DateTime dateTime = CalendarHelper.convertDateToDateTime(date);
                    if (selectedDates.contains(dateTime)){

                        caldroidFragment.clearSelectedDate(date);
                        caldroidFragment.refreshView();
                    }else {
                        caldroidFragment.setSelectedDate(date);
                        caldroidFragment.refreshView();
                    }


                }




            }

            @Override
            public void onChangeMonth(int month, int year) {




            }

            @Override
            public void onLongClickDate(Date date, View view) {

            }

            @Override
            public void onCaldroidViewCreated() {

            }

        };

        // Setup Caldroid
        caldroidFragment.setCaldroidListener(listener);

        caldroidFragment.refreshView();
    }




    public static int  getDatesCount(Date dBegin, Date dEnd) {
        List<Date> lDate = new ArrayList();

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(dBegin);
        if (calendar.get(Calendar.DAY_OF_WEEK )== Calendar.SATURDAY || calendar.get(Calendar.DAY_OF_WEEK )== Calendar.SUNDAY){
        }else {
            lDate.add(dBegin);

        }

        Calendar calBegin = Calendar.getInstance();
        // 使用给定的 Date 设置此 Calendar 的时间
        calBegin.setTime(dBegin);
        Calendar calEnd = Calendar.getInstance();
        // 使用给定的 Date 设置此 Calendar 的时间
        calEnd.setTime(dEnd);
        // 测试此日期是否在指定日期之后
        while (dEnd.after(calBegin.getTime())) {
            // 根据日历的规则，为给定的日历字段添加或减去指定的时间量
            calBegin.add(Calendar.DAY_OF_MONTH, 1);
            if (calBegin.get(Calendar.DAY_OF_WEEK )== Calendar.SATURDAY || calBegin.get(Calendar.DAY_OF_WEEK )== Calendar.SUNDAY){
            }else {
                lDate.add(dBegin);
            }

        }
        return lDate.size();
    }


    public static int daysOfTwo(Date fDate, Date oDate) {

        Calendar aCalendar = Calendar.getInstance();

        aCalendar.setTime(fDate);

        int day1 = aCalendar.get(Calendar.DAY_OF_YEAR);

        aCalendar.setTime(oDate);

        int day2 = aCalendar.get(Calendar.DAY_OF_YEAR);

        return day2 - day1;

    }


    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.new_apply_lunch_date:


                isLunch = true;

                resetCalendaFragment();

                if (mStartDate != null){

                    caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.blue_round_bg), mStartDate);
                }
                if (mEndDate != null){

                    caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.red_round_bg), mEndDate);
                }
                caldroidFragment.clearSelectedDates();


                String dayScope = (String) OverAllStorage.getInstance().get("dayScope");
                Integer dayScopeI = Integer.valueOf(dayScope)+1;

                Calendar calendar = Calendar.getInstance();
                calendar.add(Calendar.DAY_OF_MONTH,dayScopeI);
                caldroidFragment.setMinDate(calendar.getTime());

                caldroidFragment.refreshView();
                showCalendar();



                break;

            case R.id.new_apply_dinner_date:

                if (mStartDate == null || mEndDate == null){
                    Toast.makeText(this,"请先选择午餐时间",0).show();
                    return;
                }

                isLunch = false;


                resetCalendaFragment();
                if (selectedDates == null  || selectedDates.size() == 0){

                    caldroidFragment.clearSelectedDates();
                    caldroidFragment.setSelectedDates(mStartDate,mEndDate);
                }else {

                    caldroidFragment.clearSelectedDates();

                    for (int i= 0 ;i<selectedDates.size();i++){
                        caldroidFragment.setSelectedDate(CalendarHelper.convertDateTimeToDate(selectedDates.get(i)));
                    }

                }


                caldroidFragment.setMinDate(mStartDate);
                caldroidFragment.setMaxDate(mEndDate);
                caldroidFragment.refreshView();

                showCalendar();
                break;


            case R.id.new_apply_have_canteen:

                Intent intent1 = new Intent(this, CanteenListActivity.class);
                intent1.putExtra("showWu",false);
                startActivityForResult(intent1, HAVE_CANTEEN);
                break;

            case R.id.new_apply_stop_canteen:

                startActivityForResult(new Intent(this, CanteenListActivity.class), STOP_CANTEEN);
                break;

            case R.id.new_apply_entourage:
                startActivityForResult(new Intent(this, TogetherPeopleActivity.class), TOGETHER_PEOPLE);
                break;

            case R.id.new_apply_shadow:
                // dismissCalendar();
                break;

            case R.id.new_apply_carlenda_cancel_btn:
                if (isLunch){
                    if (isSelectStartDate) {

                        dismissCalendar();
                    } else {
                        isSelectStartDate = true;
                        mNewApplyCarlendaTv.setText("请选择开始时间");
                        mNewApplyCarlendaCancelBtn.setText("取消");
                        mNewApplyCarlendaOkBtn.setText("下一步");

                        if (mStartDate != null){

                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.blue_round_bg), mStartDate);
                            caldroidFragment.refreshView();
                        }


                    }
                }else {
                    dismissCalendar();

                }

                break;

            case R.id.new_apply_carlenda_ok_btn:

                if (isLunch){
                    if (isSelectStartDate) {

                        //selectedDates = caldroidFragment.getSelectedDates();
                        isSelectStartDate = false;
                        mNewApplyCarlendaTv.setText("请选择结束时间");

                        mNewApplyCarlendaCancelBtn.setText("上一步");
                        mNewApplyCarlendaOkBtn.setText("确定");
                        if (mEndDate != null){

                            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.red_round_bg), mEndDate);
                            caldroidFragment.refreshView();
                        }
                    } else {

                        if (mEndDate == null) {
                            Toast.makeText(NewApplyActivity.this, "请选择结束时间", 0).show();
                            return;
                        }
                        dismissCalendar();

                        if (selectedDates != null){
                            selectedDates.clear();
                        }
                        final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                        String startDateStr = formatter.format(mStartDate);
                        String endDateStr = formatter.format(mEndDate);
                        if (isLunch) {

                            mNewApplyLunchDate.setRightText(startDateStr + "至" + endDateStr);
                            int datesCount = getDatesCount(mStartDate, mEndDate);
                            mNewApplyLunchDays.setRightText(datesCount + "天");

                            mNewApplyDinnerDate.setRightText(startDateStr + "至" + endDateStr);
                            mNewApplyDinnerDays.setRightText(datesCount + "天");

                        } else {
                            mNewApplyDinnerDate.setRightText(startDateStr + "至" + endDateStr);
                            mNewApplyDinnerDays.setRightText(selectedDates.size() + "天");

                        }

                    }
                }else {

                    dismissCalendar();

                   // selectedDates = caldroidFragment.getSelectedDates();
                     if (selectedDates == null){
                        selectedDates = new ArrayList<>();
                    }
                    selectedDates.clear();
                    selectedDates.addAll(caldroidFragment.getSelectedDates());
                    Collections.sort(selectedDates, new Comparator<DateTime>() {
                        @Override
                        public int compare(DateTime dateTime, DateTime t1) {
                            Date date = CalendarHelper.convertDateTimeToDate(dateTime);
                            Date date1 = CalendarHelper.convertDateTimeToDate(t1);
                            return (int) ((date.getTime() - date1.getTime()) % 65536);
                        }
                    });
                    if (selectedDates == null ||selectedDates.size() ==0){
                        mNewApplyDinnerDate.setRightText("无");
                        mNewApplyDinnerDays.setRightText("0天");
                        return;
                    }
                    final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    DateTime startDate = selectedDates.get(0);
                    DateTime endDate = selectedDates.get(selectedDates.size() - 1);
                    Date fDate = CalendarHelper.convertDateTimeToDate(startDate);
                    Date oDate = CalendarHelper.convertDateTimeToDate(endDate);
                    String startDateStr = formatter.format(fDate);
                    String endDateStr = formatter.format(oDate);
                    mNewApplyDinnerDate.setRightText(startDateStr + "至" + endDateStr);

                    mNewApplyDinnerDays.setRightText(selectedDates.size() + "天");

                }



                break;

            case R.id.new_apply_commit_btn:
                doCommit();

                break;
            case R.id.new_apply_charger_item:
                Intent intent = new Intent(NewApplyActivity.this, ChargerListActivity.class);
                startActivityForResult(intent, CHARGER);
                break;
            default:
                break;

        }
    }

    private void doCommit() {




        String url = String.format(Consts.SERVER_PREFIX +"/mealbook/api/booking/start");

        final String dataJson = getDataJson();
        Log.i("wuming", "dataJson:" + dataJson);
        if (TextUtils.isEmpty(dataJson)) {
            return;
        }


        final CommonDialog commonDialog = new CommonDialog(NewApplyActivity.this);
        commonDialog.setText("处理中...");
        commonDialog.show();


        OkHttpUtils
                .post()
                .addParams("data", dataJson)
                .url(url)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e) {

                        commonDialog.dismiss();
                        Toast.makeText(getApplicationContext(), e.toString(), 0).show();

                    }

                    @Override
                    public void onResponse(String response) {
                        commonDialog.dismiss();
                        Log.i("wuming", "  new  response:" + response);
                        Toast.makeText(getApplicationContext(), "成功", 0).show();
                        finish();
                    }
                });


    }

    private String getDataJson() {
        ApplyApply applyApply = new ApplyApply();

        ArrayList<ApplyApply.DiningPersonBean> diningPersonBeen = new ArrayList<>();
        ApplyApply.DiningPersonBean diningPersonBean ;

        if (!TextUtils.isEmpty(otherPeople)) {

            diningPersonBean = new ApplyApply.DiningPersonBean() ;
                diningPersonBean.setUserId("");
                diningPersonBean.setUserName(otherPeople);
            diningPersonBeen.add(diningPersonBean);

        }

        if (qixinUsersss != null && qixinUsersss.size() != 0){
            for (int i = 0; i < qixinUsersss.size(); i++) {
                QixinUser qixinUser = qixinUsersss.get(i);

                diningPersonBean = new ApplyApply.DiningPersonBean() ;

                diningPersonBean.setUserId(qixinUser.getUserId());
                diningPersonBean.setUserName(Uri.encode(qixinUser.getUserName()));
                diningPersonBeen.add(diningPersonBean);
            }
        }



        diningPersonBean = new ApplyApply.DiningPersonBean() ;

        diningPersonBean.setUserId(OverAllStorage.getInstance().get("userId").toString());
        diningPersonBean.setUserName(Uri.encode(OverAllStorage.getInstance().get("userName").toString()));
        diningPersonBeen.add(diningPersonBean);

        if (mApproveBean == null ) {
            Toast.makeText(NewApplyActivity.this, "请选择食堂", 0).show();
            return "";
        }

        if (selectCharger == null){
            Toast.makeText(NewApplyActivity.this, "请选择审批主管", 0).show();
            return "";
        }
        if (mStartDate == null || mEndDate == null) {
            Toast.makeText(NewApplyActivity.this, "请选择时间", 0).show();
            return "";
        }


        applyApply.setDiningPerson(diningPersonBeen);
        applyApply.setBookingPerson(OverAllStorage.getInstance().get("openId").toString());
        applyApply.setStepFirst(mApproveBean.getOperator().getId());
        applyApply.setStepSecond(selectCharger.getId());
        applyApply.setDiningRoomId(mApproveBean.getId());
        if (stopCarteen != null){
            applyApply.setStopDiningRoomId(stopCarteen.getId());
        }
        final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

        applyApply.setStartTime(formatter.format(mStartDate));
        applyApply.setEndTime(formatter.format(mEndDate));
        applyApply.setDays(mNewApplyLunchDays.getRightText().toString().replace("天", ""));
        applyApply.setDineNumber(dinnerNum);


        StringBuilder stringBuilder = new StringBuilder();

        if (selectedDates != null){
            for (int i = 0; i < selectedDates.size(); i++) {

                DateTime dateTime = selectedDates.get(i);
                Date date = CalendarHelper.convertDateTimeToDate(dateTime);
                String format = formatter.format(date);
                if (i == 0){
                    stringBuilder.append(format);
                }else {
                    stringBuilder.append(","+format);
                }


            }
        }



        applyApply.setDinner(stringBuilder.toString());
        applyApply.setReason(Uri.encode(mNewApplyReasonEt.getText().toString()));

        Gson gson = new Gson();
        String json = gson.toJson(applyApply);
        return json;

    }

    private void resetCalendaFragment() {
        if (mStartDate != null) {
            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.cell_bg), mStartDate);

        }

        if (isLunch){
            mNewApplyCarlendaCancelBtn.setText("取消");
            mNewApplyCarlendaOkBtn.setText("下一步");
            mNewApplyCarlendaTv.setText("请选择开始时间");
            mNewApplyCarlendaCancelBtn.setEnabled(true);
            mNewApplyCarlendaOkBtn.setEnabled(true);
        }else {
            mNewApplyCarlendaCancelBtn.setText("取消");
            mNewApplyCarlendaOkBtn.setText("确定");
            mNewApplyCarlendaTv.setText("请选择晚餐时间");
            mNewApplyCarlendaCancelBtn.setEnabled(true);
            mNewApplyCarlendaOkBtn.setEnabled(true);
        }

      //  caldroidFragment.clearSelectedDates();
        caldroidFragment.setMinDate(new Date());
        caldroidFragment.setMaxDate(null);


        if (mEndDate != null) {
            caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.cell_bg), mEndDate);

        }

        isSelectStartDate = true;
        Date today = new Date();
      //  mStartDate = today;
       // caldroidFragment.setBackgroundDrawableForDate(getResources().getDrawable(R.drawable.blue_round_bg), today);

        caldroidFragment.refreshView();
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        if (data == null) {
            return;
        }
        if (requestCode == HAVE_CANTEEN) {
            Carteen.RoomListBean roomListBean = (Carteen.RoomListBean) data.getSerializableExtra("selectCarteen");
            if (roomListBean != null) {
                mApproveBean = roomListBean;
                mNewApplyHaveCanteen.setRightText(roomListBean.getRegional().getName() + "." + roomListBean.getRoomName());
                mNewApplyApproverName.setText(roomListBean.getOperator().getName());
            } else {
                mApproveBean = null;

                mNewApplyHaveCanteen.setRightText("无");

            }
        } else if (requestCode == STOP_CANTEEN) {
            stopCarteen = (Carteen.RoomListBean) data.getSerializableExtra("selectCarteen");
            if (stopCarteen != null) {

                mNewApplyStopCanteen.setRightText(stopCarteen.getRegional().getName() + "." + stopCarteen.getRoomName());
            } else {
                mNewApplyStopCanteen.setRightText("无");

            }
        } else if (requestCode == TOGETHER_PEOPLE) {

            togetherPeople = data.getStringExtra("togetherPeople");
            dinnerNum = data.getStringExtra("dinnerNum");
           otherPeople = data.getStringExtra("otherPeople");
            String qixinUsers = data.getStringExtra("qixinUsers");
            qixinUsersss = (List<QixinUser>) OverAllStorage.getInstance().get(qixinUsers);
            if (TextUtils.isEmpty(togetherPeople)) {

                mNewApplyEntourage.setRightText("无");
            } else {
                int size = 0;
                if (qixinUsersss != null){
                    size = qixinUsersss.size();
                }
                int num = size + Integer.valueOf(dinnerNum);
                mNewApplyEntourage.setRightText(togetherPeople+" 共"+num+"人");

            }

        } else if (requestCode == CHARGER) {
            selectCharger = (UserInfo) data.getSerializableExtra("charger");
            if (selectCharger != null) {
                chargerName.setText(selectCharger.getName());
            }

        }


    }

    public void showCalendar() {

        if (isLunch){
            if (isSelectStartDate) {
                mNewApplyCarlendaTv.setText("请选择开始时间");
            } else {
                mNewApplyCarlendaTv.setText("请选择结束时间");

            }
        }


        carlendaArea.setVisibility(View.VISIBLE);
        shadow.setVisibility(View.VISIBLE);
        carlendaArea.measure(0, 0);
        final int height = -carlendaArea.getMeasuredHeight();
        ValueAnimator va = ValueAnimator.ofFloat(height, 0);
        va.setDuration(300);
        va.setInterpolator(new AccelerateDecelerateInterpolator());
        va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                Float animatedValue = (Float) valueAnimator.getAnimatedValue();
                carlendaArea.setTranslationY(animatedValue);
                shadow.setBackgroundColor(Color.argb((int) ((0.6f - Math.abs(animatedValue / height) * 0.6f) * 255), 0, 0, 0));
            }
        });
        va.start();

    }


    public void dismissCalendar() {
        final int height = -carlendaArea.getMeasuredHeight();
        ValueAnimator va = ValueAnimator.ofFloat(0, height);
        va.setDuration(300);
        va.setInterpolator(new AccelerateDecelerateInterpolator());
        va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                Float animatedValue = (Float) valueAnimator.getAnimatedValue();
                carlendaArea.setTranslationY(animatedValue);
                shadow.setBackgroundColor(Color.argb((int) ((0.6f - Math.abs(animatedValue / height) * 0.6f) * 255), 0, 0, 0));


            }
        });
        va.addListener(new MyAnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                carlendaArea.setVisibility(View.INVISIBLE);
                shadow.setVisibility(View.INVISIBLE);
            }
        });
        va.start();
    }



    public  void getTimeScope(){
        String url =String.format( Consts.SERVER_PREFIX +"/mealbook/api/booking/time_scope");

        OkHttpUtils
                .post()
                .url(url)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e) {

                    }

                    @Override
                    public void onResponse(String response) {

                        JSONObject jsonObject = null;
                        try {

                            jsonObject = new JSONObject(response);

                            int state = (int) jsonObject.get("state");
                            if (state == 0){

                               // Toast.makeText(ApproveDetailActivity.this,"审批成功",0).show();
                                JSONObject data = (JSONObject) jsonObject.get("data");
                                if (data != null){
                                    String scope = (String) data.get("cval");
                                    OverAllStorage.getInstance().put("dayScope",scope);
                                }

                            }else {

                                //获取间隔时间失败

                            }

                        } catch (JSONException e) {

                            //获取间隔时间失败

                        }


                    }
                });

    }








    @Override
    public void initCenterTv(TextView cTv) {
        cTv.setText("新建申请");
    }

    @Override
    public void initLeftBtn(ImageButton lBtn) {

    }

    @Override
    public void initRightBtn(Button rBtn) {

    }

    @Override
    public void initRightIBtn(ImageButton ibtn) {

    }

    @Override
    public void OnCenterTVClick(View v) {

    }

    @Override
    public void OnLeftBtnClick(View v) {
        onBackPressed();
    }

    @Override
    public void OnRightBtnClick(View v) {


    }

    @Override
    public void OnRightIBtnClick(View v) {

    }

    @Override
    public void toggleToOn(View view) {
        mNewApplyDinnerDate.setVisibility(View.VISIBLE);
        mNewApplyDinnerDays.setVisibility(View.VISIBLE);
        mWhetherDinnerSwitch.setOpened(true);
    }

    @Override
    public void toggleToOff(View view) {
        mWhetherDinnerSwitch.setOpened(false);

        mNewApplyDinnerDate.setVisibility(View.GONE);
        mNewApplyDinnerDays.setVisibility(View.GONE);
    }
}
package com.szcomtop.meal.activity;

import android.app.Dialog;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.szcomtop.meal.R;
import com.szcomtop.meal.common.CommonAdapter;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.common.OverAllStorage;
import com.szcomtop.meal.common.ViewHolder;
import com.szcomtop.meal.model.ApplyInfo;
import com.szcomtop.meal.model.CarteenStastatic1;
import com.szcomtop.meal.model.Response;
import com.szcomtop.meal.views.CommonDialog;
import com.szcomtop.meal.views.DateWheelView;
import com.szcomtop.meal.views.HeadView;
import com.szcomtop.meal.views.SlidingFromTopView;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import okhttp3.Call;

/**
 * Created by wuming on 16/3/25.
 */
public class StatisticsActivity  extends  BaseActivity implements AdapterView.OnItemClickListener, View.OnClickListener {

    private HeadView mStatisticTitle;
    private ImageView mStatisticArrowUp;
    private TextView mStatisticDateTv;
    private ImageView mStatisticArrowDown;
    private TextView mStatisticCanteenTv;
    private ListView mStatisticListview;
    private SlidingFromTopView slidingFromTopView;
    private List<CarteenStastatic1> carteenStastatic1s;
    private CommonDialog commonDialog;
    private String startTime = "";
    private String endTime= "";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_statistic);
        assignViews();
        initView();

                Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
      mStatisticDateTv.setText(String.format("%d年%2d月至%d年%2d月",year,month+1,year,month+1));

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        getStatistics(dateFormat.format(calendar.getTime()),dateFormat.format(calendar.getTime()));
    }

    private void initView() {
        mStatisticTitle.setHeadParams(HeadView.TYPE_LEFTONLY, this);
        mStatisticTitle.setOnHeadClick(this);
        mStatisticArrowDown.setOnClickListener(this);


    }

    private void assignViews() {
        mStatisticTitle = (HeadView) findViewById(R.id.statistic_title);
        mStatisticDateTv = (TextView) findViewById(R.id.statistic_date_tv);
        mStatisticArrowDown = (ImageView) findViewById(R.id.statistic_arrow_down);
        mStatisticListview = (ListView) findViewById(R.id.statistic_listview);



    }


    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText("用餐统计");
    }

    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {

        Intent intent = new Intent(this, StatisticsDetailActivity.class);
        intent.putExtra("dineRoomId",carteenStastatic1s.get(i).getDineRoomId());
        intent.putExtra("dineRoomName",carteenStastatic1s.get(i).getDineRoomName());
        intent.putExtra("startTime",startTime);
        intent.putExtra("endTime",endTime);
        startActivity(intent);
    }


    public void getStatistics(String startTime ,String endTime) {

        if (commonDialog == null){

            commonDialog = new CommonDialog(this);
            commonDialog.setText("更新数据");
        }
        commonDialog.show();

        String url = String.format(Consts.SERVER_PREFIX +"/mealbook/api/statistical/dine_room");

//        Calendar calendar = Calendar.getInstance();
//        calendar.add(Calendar.MONTH,-3);
//        Date startTime = calendar.getTime();
//
//        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");


        OkHttpUtils
                .post()
                .url(url)
                .addParams("startTime", startTime )
                .addParams("endTime",endTime )
                // .addParams("type","all")
                .addParams("userId", OverAllStorage.getInstance().get("openId").toString())
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e) {

                        // commonDialog.dismiss();


                        if (commonDialog != null && commonDialog.isShowing()){
                            commonDialog.dismiss();
                        }

                    }

                    @Override
                    public void onResponse(String response) {


                        if (commonDialog != null && commonDialog.isShowing()){
                            commonDialog.dismiss();
                        }

                        try {

                            Gson gson = new Gson();
                            Response<CarteenStastatic1> res = gson.fromJson(response, new TypeToken<Response<CarteenStastatic1>>() {
                            }.getType());

                            int state = res.getState();
                            if (state == 0){
                                //成功
                                carteenStastatic1s = res.getData();
                                if (carteenStastatic1s == null||carteenStastatic1s.size() == 0){

                                    //为空的情况


                                }else {

                                    CommonAdapter<CarteenStastatic1> commonAdapter = new CommonAdapter<CarteenStastatic1>(StatisticsActivity.this, carteenStastatic1s, R.layout.statistics_list_item) {


                                        @Override
                                        public void convert(ViewHolder holder, CarteenStastatic1 carteenStastatic1) {

                                            holder.setText(R.id.statistic_list_item_name,carteenStastatic1.getDineRoomName())
                                                    .setText(R.id.statistic_list_item_addNum,carteenStastatic1.getAddNum()+"")
                                                    .setText(R.id.statistic_list_item_reduceNum,carteenStastatic1.getReduceNum()+"")
                                                    .setText(R.id.statistic_list_item_count,carteenStastatic1.getCount()+"");


                                        }
                                    };
                                    mStatisticListview.setAdapter(commonAdapter);
                                    mStatisticListview.setOnItemClickListener(StatisticsActivity.this);

                                }



                            }else {
                                //失败
                                Toast.makeText(StatisticsActivity.this,"获取数据失败",0).show();
                            }


                        }catch (Exception e){
                            //失败
                            Toast.makeText(StatisticsActivity.this,"获取数据失败",0).show();


                        }

                    }
                });

    }





    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.statistic_arrow_down:

                if (slidingFromTopView == null){
                    slidingFromTopView = new SlidingFromTopView(this);
                    FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT);
                    float dimension = getResources().getDimension(R.dimen.title_height);
                    params.topMargin = (int) dimension;
                    addContentView(slidingFromTopView,params);
                    final DateWheelView dateWheelView = new DateWheelView(this);
                    dateWheelView.findViewById(R.id.date_wheel_view_cancel_btn).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            slidingFromTopView.dismiss();
                        }
                    });
                    dateWheelView.findViewById(R.id.date_wheel_view_ok_btn).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                           startTime = dateWheelView.getStartTime();
                           endTime = dateWheelView.getEndTime();

                            Log.i("wuming","startTime:"+startTime);
                            Log.i("wuming","endTime:"+endTime);

                            int i = startTime.compareTo(endTime);
                            if (i > 0){
                                Toast.makeText(StatisticsActivity.this,"开始日期不能大于结束日期",0).show();
                            }else {

                                slidingFromTopView.dismiss();
                                String[] startSplit = startTime.split("-");
                                String[] endSplit = endTime.split("-");
                                mStatisticDateTv.setText(String.format("%s年%s月至%s年%s月",startSplit[0],startSplit[1],endSplit[0],endSplit[1]));


                                getStatistics(startTime,endTime);


                            }

                        }
                    });
                    slidingFromTopView.setView(dateWheelView);
                }

                slidingFromTopView.show();

                break;
        }
    }
}
package com.szcomtop.meal.activity;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.szcomtop.meal.R;
import com.szcomtop.meal.common.CommonAdapter;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.common.ViewHolder;
import com.szcomtop.meal.model.CarteenStastatic1;
import com.szcomtop.meal.model.Response;
import com.szcomtop.meal.views.CommonDialog;
import com.szcomtop.meal.views.DateWheelView;
import com.szcomtop.meal.views.HeadView;
import com.szcomtop.meal.views.SlidingFromTopView;
import com.szcomtop.meal.views.StatisticCard;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONArray;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import okhttp3.Call;

/**
 * Created by wuming on 16/3/25.
 */
public class StatisticsDetailActivity extends BaseActivity implements View.OnClickListener {

    private HeadView mStatisticDetailTitle;
    private TextView mStatisticDetailDateTv;
    private TextView mStatisticDetailDepartment;
    private StatisticCard mStatisticDetailStop;
    private StatisticCard mStatisticDetailHave;
    private LinearLayout mStatisticDetailDateArea;
    private SlidingFromTopView slidingFromTopView;
    private String dineRoomId = "";
    private String dineRoomName = "";
    private CommonDialog commonDialog;
    private String startTime;
    private String endTime;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_statistics_detail);
        assignViews();
        initView();
    }

    private void initView() {

        Intent intent = getIntent();
        dineRoomId = intent.getStringExtra("dineRoomId");
        Log.i("wuming","dineRoomId:"+dineRoomId);
        dineRoomName = intent.getStringExtra("dineRoomName");
        startTime = intent.getStringExtra("startTime");
        endTime = intent.getStringExtra("endTime");


        mStatisticDetailTitle.setHeadParams(HeadView.TYPE_LEFTONLY,this);
        mStatisticDetailTitle.setOnHeadClick(this);
        mStatisticDetailStop.setTitleLeftText("停餐食堂");
        mStatisticDetailHave.setTitleLeftText("临餐食堂");
        mStatisticDetailDateArea.setOnClickListener(this);

        if (!TextUtils.isEmpty(startTime)&& !TextUtils.isEmpty(endTime)){
            getStatisticDetail(startTime,endTime);
            String[] startSplit = startTime.split("-");
            String[] endSplit = endTime.split("-");
            mStatisticDetailDateTv.setText(String.format("%s年%s月至%s年%s月",startSplit[0],startSplit[1],endSplit[0],endSplit[1]));
        }else {
            Calendar calendar = Calendar.getInstance();

            int year = calendar.get(Calendar.YEAR);
            int month = calendar.get(Calendar.MONTH);
            mStatisticDetailDateTv.setText(String.format("%d年%2d月至%d年%2d月",year,month+1,year,month+1));

//        calendar.add(Calendar.MONTH,-3);
//        Date time = calendar.getTime();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
//
//
            getStatisticDetail(dateFormat.format(new Date()),dateFormat.format(new Date()));
        }






    }

    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText(dineRoomName);
    }

    private void assignViews() {
        mStatisticDetailTitle = (HeadView) findViewById(R.id.statistic_detail_title);
        mStatisticDetailDateTv = (TextView) findViewById(R.id.statistic_detail_date_tv);
        mStatisticDetailStop = (StatisticCard) findViewById(R.id.statistic_detail_stop);
        mStatisticDetailHave = (StatisticCard) findViewById(R.id.statistic_detail_have);
        mStatisticDetailDateArea = (LinearLayout)findViewById(R.id.statistic_detail_date_area);
    }


    public void getStatisticDetail(String startTime ,String endTime) {


        if (commonDialog == null){

            commonDialog = new CommonDialog(this);
            commonDialog.setText("更新数据");
        }
        commonDialog.show();

        String url = String.format(Consts.SERVER_PREFIX +"/mealbook/api/statistical/dine_room/details");


        OkHttpUtils
                .post()
                .url(url)
                .addParams("startTime", startTime )
                .addParams("endTime",endTime )
                .addParams("dineRoomId",dineRoomId)
                .build()
                .execute(new StringCallback() {
                    @Override
                    public void onError(Call call, Exception e) {

                        // commonDialog.dismiss();


                    }

                    @Override
                    public void onResponse(String response) {

                        if (commonDialog != null && commonDialog.isShowing()){
                            commonDialog.dismiss();
                        }

                        Log.i("wuming","response:"+response);
                        try {

                            JSONObject jsonObject = new JSONObject(response);
                            int state = (int) jsonObject.get("state");


                            if (state == 0){
                                //成功
                                JSONObject data = (JSONObject) jsonObject.get("data");
                                if (data != null){
                                    JSONArray sourceList = (JSONArray) data.get("sourceList");
                                    String sourceListStr = sourceList.toString();
                                    JSONArray toList = (JSONArray) data.get("toList");
                                    String toListStr = toList.toString();
                                    Gson gson = new Gson();
                                    List<CarteenStastatic1> source= gson.fromJson(sourceListStr, new TypeToken<List<CarteenStastatic1>>() {
                                    }.getType());
                                    List<CarteenStastatic1> to= gson.fromJson(toListStr, new TypeToken<List<CarteenStastatic1>>() {
                                    }.getType());
                                    mStatisticDetailHave.setData(source,true);
                                    mStatisticDetailStop.setData(to,false);




                                }


                            }else {
                                //失败
//                                mStatisticDetailHave.setData(null,true);
//                                mStatisticDetailStop.setData(null,false);
                                Toast.makeText(StatisticsDetailActivity.this,"获取数据失败",0).show();

                            }


                        }catch (Exception e){
                            //失败

//                            mStatisticDetailHave.setData(null,true);
//                            mStatisticDetailStop.setData(null,false);
                            Toast.makeText(StatisticsDetailActivity.this,"获取数据失败",0).show();


                        }

                    }
                });

    }


    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.statistic_detail_date_area:

                if (slidingFromTopView == null){
                    slidingFromTopView = new SlidingFromTopView(this);
                    FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT);
                    float dimension = getResources().getDimension(R.dimen.title_height);
                    params.topMargin = (int) dimension;
                    addContentView(slidingFromTopView,params);
                    final DateWheelView dateWheelView = new DateWheelView(this);
                    dateWheelView.findViewById(R.id.date_wheel_view_cancel_btn).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            slidingFromTopView.dismiss();
                        }
                    });
                    dateWheelView.findViewById(R.id.date_wheel_view_ok_btn).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            String startTime = dateWheelView.getStartTime();
                            String endTime = dateWheelView.getEndTime();

                            Log.i("wuming","startTime:"+startTime);
                            Log.i("wuming","endTime:"+endTime);

                            int i = startTime.compareTo(endTime);
                            if (i > 0){
                                Toast.makeText(StatisticsDetailActivity.this,"开始日期不能大于结束日期",0).show();
                            }else {

                                slidingFromTopView.dismiss();
                                String[] startSplit = startTime.split("-");
                                String[] endSplit = endTime.split("-");
                                mStatisticDetailDateTv.setText(String.format("%s年%s月至%s年%s月",startSplit[0],startSplit[1],endSplit[0],endSplit[1]));

                                getStatisticDetail(startTime,endTime);


                            }

                        }
                    });
                    slidingFromTopView.setView(dateWheelView);
                }

                slidingFromTopView.show();
                break;
        }
    }
}
package com.szcomtop.meal.activity;

import android.content.ComponentName;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.szcomtop.meal.R;
import com.szcomtop.meal.common.OverAllStorage;
import com.szcomtop.meal.model.QixinUser;
import com.szcomtop.meal.views.HeadView;
import com.szcomtop.meal.views.OptionItemView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

/**
 * Created by wuming on 2016/4/18.
 */
public class TogetherPeopleActivity  extends BaseActivity implements View.OnClickListener {


    private HeadView mTogetherPeopleTitle;
    private OptionItemView mTogetherPeopleTogetherItem;
    private TextView mTv2;
    private EditText mTogetherPeopleOtherEt;
    private EditText mTogetherPeopleTogetherNumOfDinner;
    private StringBuilder peopleStringBuilder;
    private long l;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_together_people);

        assignViews();

        initView();

    }

    private void initView() {
        mTogetherPeopleTitle.setHeadParams(HeadView.TYPE_LRIGHTBTN,this);
        mTogetherPeopleTitle.setOnHeadClick(this);

        mTogetherPeopleTogetherItem.setOnClickListener(this);
    }


    private void assignViews() {
        mTogetherPeopleTitle = (HeadView) findViewById(R.id.together_people_title);
        mTogetherPeopleTogetherItem = (OptionItemView) findViewById(R.id.together_people_together_item);
        mTv2 = (TextView) findViewById(R.id.tv2);
        mTogetherPeopleOtherEt = (EditText) findViewById(R.id.together_people_other_et);
        mTogetherPeopleTogetherNumOfDinner = (EditText) findViewById(R.id.together_people_together_num_of_dinner);
    }


    @Override
    public void initCenterTv(TextView cTv) {
        super.initCenterTv(cTv);
        cTv.setText("随行人员");
    }


    @Override
    public void initRightBtn(Button rBtn) {
        super.initRightBtn(rBtn);
        rBtn.setText("完成");
    }

    @Override
    public void OnLeftBtnClick(View v) {
        super.OnLeftBtnClick(v);
        onBackPressed();
    }

    @Override
    public void OnRightBtnClick(View v) {
        super.OnRightBtnClick(v);
        onBackPressed();

    }


    @Override
    public void onBackPressed() {

        Intent intent = new Intent();
        String s = mTogetherPeopleOtherEt.getText().toString();

        if (!TextUtils.isEmpty(s)){
            if (peopleStringBuilder == null){
                peopleStringBuilder = new StringBuilder();
                peopleStringBuilder.append(s);
            }else {

                peopleStringBuilder.append(","+s);
            }
        }

        if (peopleStringBuilder == null){
            peopleStringBuilder = new StringBuilder();
        }

        intent.putExtra("togetherPeople",peopleStringBuilder.toString());
        intent.putExtra("otherPeople",s);
        String value = mTogetherPeopleTogetherNumOfDinner.getText().toString();
        boolean empty = TextUtils.isEmpty(value);
        intent.putExtra("dinnerNum", empty? "0":value);
        intent.putExtra("qixinUsers",l+"");
        setResult(0,intent);

        super.onBackPressed();
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.together_people_together_item:
                ComponentName componentName = new ComponentName("com.comtop.eim", "com.comtop.eim.share.ReceiveShareContentActivity");
                Intent intent = new Intent();
                intent.setComponent(componentName);
                intent.putExtra("_eimmessage_appName","邮箱");
                intent.putExtra("_eimmessage_appPackage","com.comtop.mail");
                intent.putExtra("_eimapi_command_type",6);
              //  intent.putExtra("userId","000148168cf99bacb");
                intent.putExtra("userId", OverAllStorage.getInstance().get("userId").toString());
                startActivityForResult(intent,100);


                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        if(data == null){
            mTogetherPeopleTogetherItem.setRightText("无");
            return;
        }
        peopleStringBuilder = new StringBuilder();
        try {
            String selectedusers = data.getStringExtra("selectedusers");
            if (TextUtils.isEmpty(selectedusers)){
                mTogetherPeopleTogetherItem.setRightText("无");
                return;

            }
            JSONArray jsonArray = new JSONArray(new JSONObject(selectedusers).get("selectedusers") + "");
            ArrayList<QixinUser> qixinUsers = new ArrayList<>();
            for (int i = 0 ;i<jsonArray.length();i++){
                JSONObject opt = (JSONObject) jsonArray.opt(i);
                String username = opt.getString("username");
                String userId = opt.getString("userId");

                QixinUser qixinUser = new QixinUser(userId, username);
                qixinUsers.add(qixinUser);

                if (i == 0) {
                    peopleStringBuilder.append(username);

                }else {
                    peopleStringBuilder.append(","+username);
                }
            }
            l = System.currentTimeMillis();
            OverAllStorage.getInstance().put(l+"",qixinUsers);
            mTogetherPeopleTogetherItem.setRightText(peopleStringBuilder.toString());
        } catch (JSONException e) {
            e.printStackTrace();
        }


        super.onActivityResult(requestCode, resultCode, data);
    }
}
package com.szcomtop.meal.activity;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;

import com.szcomtop.meal.R;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.common.OverAllStorage;
import com.szcomtop.meal.views.CommonDialog;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import okhttp3.Call;

/**
 * Created by wuming on 16/5/3.
 */
public class TransparentActivity  extends  BaseActivity {

    private CommonDialog commonDialog;

    private static final String START_PARAMS =  "PARAMS";

    Handler handler = new Handler();


    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.test);
        initIntent();

        if (initIntent()){
            commonDialog = new CommonDialog(this);
            commonDialog.setText("获取数据...").show();
            getAuthority();
        }



    }


    private boolean initIntent() {
        Intent intent = getIntent();
        Bundle extras = intent.getExtras();



        if (intent.hasExtra(START_PARAMS)){
            String stringExtra = intent.getStringExtra(START_PARAMS);
            try {
                JSONObject jsonObject = new JSONObject(stringExtra);
                String userId = jsonObject.getString("user_id");
                String openId = jsonObject.getString("open_id");
                String userName = jsonObject.getString("creater_name");

                if (TextUtils.isEmpty(userId )|| TextUtils.isEmpty(openId)){
                    Toast.makeText(this,"企信打开应用失败，程序即将退出",0).show();
                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            System.exit(0);

                        }
                    },1000);
                    return false;
                }

                OverAllStorage.getInstance().put("userId",userId);
                OverAllStorage.getInstance().put("openId",openId);
                OverAllStorage.getInstance().put("userName",userName);
                Log.i("wuming","userId:"+userId);
                Log.i("wuming","openId:"+openId);

            } catch (JSONException e) {
                Toast.makeText(this,"打开应用失败，程序即将退出",0).show();
                handler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        System.exit(0);

                    }
                },1000);
                return false;
            }

        }else {
                Toast.makeText(this,"请从企信打开应用，程序即将退出",0).show();
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    System.exit(0);

                }
            },1000);

            return false;


        }
        return  true ;
    }



    public  void getUserInfo(){

    }



    public  void getAuthority(){
        String url =String.format( Consts.SERVER_PREFIX +"/mealbook/api/user/get_permissions");
        startActivity(new Intent(TransparentActivity.this,MyApproveApplysActivity.class));


//        OkHttpUtils
//                .post()
//                .url(url)
//                .addParams("userId",OverAllStorage.getInstance().get("openId").toString())
//                .build()
//                .execute(new StringCallback() {
//                    @Override
//                    public void onError(Call call, Exception e) {
//                        if (commonDialog != null){
//
//                            commonDialog.dismiss();
//                        }
//
//
//
//                    }
//
//                    @Override
//                    public void onResponse(String response) {
//
//                        if (commonDialog != null){
//
//                            commonDialog.dismiss();
//                        }
//
//
//                        JSONObject jsonObject = null;
//                        try {
//
//                            jsonObject = new JSONObject(response);
//
//                            int state = (int) jsonObject.get("state");
//                            if (state == 0){
//
//                                // Toast.makeText(ApproveDetailActivity.this,"审批成功",0).show();
//                                Log.i("wuming","data:"+response);
//
//                                if (response.contains("TODO_TASK")){
//                                    finish();
//                                    startActivity(new Intent(TransparentActivity.this,MyApproveApplysActivity.class));
//                                }else{
//                                    finish();
//                                    startActivity(new Intent(TransparentActivity.this,MyApplysActivity.class));
//
//                                }
//
//                            }else {
//
//
//                                Toast.makeText(TransparentActivity.this,"获取数据失败，程序将退出",0).show();
//                                finish();
//                                //获取权限失败失败
//                                Log.i("wuming","获取权限失败失败:");
//
//                            }
//
//                        } catch (JSONException e) {
//                            Toast.makeText(TransparentActivity.this,"获取数据失败，程序将退出",0).show();
//                            finish();
//
//                            Log.i("wuming","获取权限失败");
//
//                            //获取间隔时间失败
//
//                        }
//
//
//                    }
//                });

    }

}
package com.szcomtop.meal.common;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;

import java.util.List;

public abstract class CommonAdapter<T> extends BaseAdapter
{
	protected Context mContext;
	protected List<T> mDatas;
	protected LayoutInflater mInflater;
	private int layoutId;

	public CommonAdapter(Context context, List<T> datas, int layoutId)
	{
		this.mContext = context;
		mInflater = LayoutInflater.from(context);
		this.mDatas = datas;
		this.layoutId = layoutId;
	}

	@Override
	public int getCount()
	{
		return mDatas == null ?  0 : mDatas.size()  ;
	}

	@Override
	public T getItem(int position)
	{
		return mDatas.get(position);
	}

	@Override
	public long getItemId(int position)
	{
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent)
	{
		ViewHolder holder = ViewHolder.get(mContext, convertView, parent,
				layoutId, position);
		convert(holder, getItem(position));
		return holder.getConvertView();
	}

	public abstract void convert(ViewHolder holder, T t);

}
package com.szcomtop.meal.common;

/**
 * Created by wuming on 16/5/5.
 */
public class Consts {

    public static final  String SERVER_PREFIX = "http://eim2.szcomtop.com:6888" ;
}
package com.szcomtop.meal.common;

import android.app.Application;

import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;

/**
 * Created by wuming on 2016/4/14.
 */
public class MealApplication extends Application {

    @Override
    public void onCreate() {
        super.onCreate();
        //initImageLoader();
    }

    private void initImageLoader() {
        //创建默认的ImageLoader配置参数
        ImageLoaderConfiguration configuration = ImageLoaderConfiguration
                .createDefault(this);

        //Initialize ImageLoader with configuration.
        ImageLoader.getInstance().init(configuration);
    }
}
package com.szcomtop.meal.common;

import android.animation.AnimatorListenerAdapter;

public class MyAnimatorListenerAdapter extends AnimatorListenerAdapter {
	
	
	
}
package com.szcomtop.meal.common;

import java.util.HashMap;

/**
 * Created by wuming on 16/2/28.
 */
public class OverAllStorage {

    private static OverAllStorage instance;
    private final HashMap<Object, Object> storageMap;

    private OverAllStorage(){

        storageMap = new HashMap<>();
//        storageMap.put(MyLocationListener.LATITUDE,0.0d);
//        storageMap.put(MyLocationListener.LONTITUDE,0.0d);
//        storageMap.put(MyLocationListener.ADDR,"");
        storageMap.put("userId","");
        storageMap.put("openId","");
        storageMap.put("userName","");

        storageMap.put("dayScope","0");


    }

    public static  synchronized OverAllStorage getInstance(){

        if (instance == null) {
            instance = new OverAllStorage();
        }
        return instance;
    }

    public void put(String key ,Object value){
        storageMap.put(key,value);
    }

    public Object get(String key){
       return storageMap.get(key);
    }



}
package com.szcomtop.meal.common;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.text.util.Linkify;
import android.util.SparseArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.widget.Checkable;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RatingBar;
import android.widget.TextView;

public class ViewHolder
{
	private SparseArray<View> mViews;
	private int mPosition;
	private View mConvertView;
	private Context mContext;
	private int mLayoutId;

	public ViewHolder(Context context, ViewGroup parent, int layoutId,
			int position)
	{
		mContext = context;
		mLayoutId = layoutId;
		this.mPosition = position;
		this.mViews = new SparseArray<View>();
		mConvertView = LayoutInflater.from(context).inflate(layoutId, parent,
				false);
		mConvertView.setTag(this);
	}

	public static ViewHolder get(Context context, View convertView,
			ViewGroup parent, int layoutId, int position)
	{
		if (convertView == null)
		{
			return new ViewHolder(context, parent, layoutId, position);
		} else
		{
			ViewHolder holder = (ViewHolder) convertView.getTag();
			holder.mPosition = position;
			return holder;
		}
	}

	public int getPosition()
	{
		return mPosition;
	}

	public int getLayoutId(){
		return mLayoutId;
	}

	/**
	 * 通过viewId获取控件
	 * 
	 * @param viewId
	 * @return
	 */
	public <T extends View> T getView(int viewId)
	{
		View view = mViews.get(viewId);
		if (view == null)
		{
			view = mConvertView.findViewById(viewId);
			mViews.put(viewId, view);
		}
		return (T) view;
	}

	public View getConvertView()
	{
		return mConvertView;
	}

	/**
	 * 设置TextView的值
	 * 
	 * @param viewId
	 * @param text
	 * @return
	 */
	public ViewHolder setText(int viewId, String text)
	{
		TextView tv = getView(viewId);
		tv.setText(text);
		return this;
	}

	public ViewHolder setImageResource(int viewId, int resId)
	{
		ImageView view = getView(viewId);
		view.setImageResource(resId);
		return this;
	}

	public ViewHolder setImageBitmap(int viewId, Bitmap bitmap)
	{
		ImageView view = getView(viewId);
		view.setImageBitmap(bitmap);
		return this;
	}

	public ViewHolder setImageDrawable(int viewId, Drawable drawable)
	{
		ImageView view = getView(viewId);
		view.setImageDrawable(drawable);
		return this;
	}

	public ViewHolder setBackgroundColor(int viewId, int color)
	{
		View view = getView(viewId);
		view.setBackgroundColor(color);
		return this;
	}

	public ViewHolder setBackgroundRes(int viewId, int backgroundRes)
	{
		View view = getView(viewId);
		view.setBackgroundResource(backgroundRes);
		return this;
	}

	public ViewHolder setTextColor(int viewId, int textColor)
	{
		TextView view = getView(viewId);
		view.setTextColor(textColor);
		return this;
	}

	public ViewHolder setTextColorRes(int viewId, int textColorRes)
	{
		TextView view = getView(viewId);
		view.setTextColor(mContext.getResources().getColor(textColorRes));
		return this;
	}

	@SuppressLint("NewApi")
	public ViewHolder setAlpha(int viewId, float value)
	{
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)
		{
			getView(viewId).setAlpha(value);
		} else
		{
			// Pre-honeycomb hack to set Alpha value
			AlphaAnimation alpha = new AlphaAnimation(value, value);
			alpha.setDuration(0);
			alpha.setFillAfter(true);
			getView(viewId).startAnimation(alpha);
		}
		return this;
	}

	public ViewHolder setVisible(int viewId, boolean visible)
	{
		View view = getView(viewId);
		view.setVisibility(visible ? View.VISIBLE : View.GONE);
		return this;
	}

	public ViewHolder linkify(int viewId)
	{
		TextView view = getView(viewId);
		Linkify.addLinks(view, Linkify.ALL);
		return this;
	}

	public ViewHolder setTypeface(Typeface typeface, int... viewIds)
	{
		for (int viewId : viewIds)
		{
			TextView view = getView(viewId);
			view.setTypeface(typeface);
			view.setPaintFlags(view.getPaintFlags() | Paint.SUBPIXEL_TEXT_FLAG);
		}
		return this;
	}

	public ViewHolder setProgress(int viewId, int progress)
	{
		ProgressBar view = getView(viewId);
		view.setProgress(progress);
		return this;
	}

	public ViewHolder setProgress(int viewId, int progress, int max)
	{
		ProgressBar view = getView(viewId);
		view.setMax(max);
		view.setProgress(progress);
		return this;
	}

	public ViewHolder setMax(int viewId, int max)
	{
		ProgressBar view = getView(viewId);
		view.setMax(max);
		return this;
	}

	public ViewHolder setRating(int viewId, float rating)
	{
		RatingBar view = getView(viewId);
		view.setRating(rating);
		return this;
	}

	public ViewHolder setRating(int viewId, float rating, int max)
	{
		RatingBar view = getView(viewId);
		view.setMax(max);
		view.setRating(rating);
		return this;
	}

	public ViewHolder setTag(int viewId, Object tag)
	{
		View view = getView(viewId);
		view.setTag(tag);
		return this;
	}

	public ViewHolder setTag(int viewId, int key, Object tag)
	{
		View view = getView(viewId);
		view.setTag(key, tag);
		return this;
	}

	public ViewHolder setChecked(int viewId, boolean checked)
	{
		Checkable view = (Checkable) getView(viewId);
		view.setChecked(checked);
		return this;
	}

	/**
	 * 关于事件的
	 */
	public ViewHolder setOnClickListener(int viewId,
			View.OnClickListener listener)
	{
		View view = getView(viewId);
		view.setOnClickListener(listener);
		return this;
	}

	public ViewHolder setOnTouchListener(int viewId,
			View.OnTouchListener listener)
	{
		View view = getView(viewId);
		view.setOnTouchListener(listener);
		return this;
	}

	public ViewHolder setOnLongClickListener(int viewId,
			View.OnLongClickListener listener)
	{
		View view = getView(viewId);
		view.setOnLongClickListener(listener);
		return this;
	}

}
package com.szcomtop.meal.fragment;

import android.content.Context;
import android.view.ViewGroup;

import com.szcomtop.meal.common.ViewHolder;
import com.szcomtop.meal.model.ApplyInfo;

/**
 * Created by wuming on 16/5/9.
 */
public class ApproveSearchViewholder  extends ViewHolder {

    private ApplyInfo applyInfo ;

    public ApproveSearchViewholder(Context context, ViewGroup parent, int layoutId, int position) {
        super(context, parent, layoutId, position);
    }

    public ApplyInfo getApplyInfo() {
        return applyInfo;
    }

    public void setApplyInfo(ApplyInfo applyInfo) {
        this.applyInfo = applyInfo;
    }
}
package com.szcomtop.meal.fragment;

import android.graphics.Color;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.szcomtop.meal.R;

import java.util.Calendar;

/**
 * Created by wuming on 16/3/25.
 */
public class BaseFragment extends Fragment {

    public void setStatus(int status, TextView statusTv, ImageView statusIv) {

        Log.i("wuming","status:"+status);

        switch (status) {
            case 1:

                statusTv.setText("[审批中]");
                statusTv.setTextColor(Color.parseColor("#ff6009"));

                statusIv.setVisibility(View.INVISIBLE);

                break;

            case 2:
                statusTv.setText("已审批(通过)");
                statusTv.setTextColor(Color.parseColor("#b3b3b3"));
                statusIv.setImageResource(R.drawable.btn_approve_icon);
                statusIv.setVisibility(View.VISIBLE);
                break;

            case 3:
                statusTv.setText("已审批(驳回)");
                statusTv.setTextColor(Color.parseColor("#b3b3b3"));

                statusIv.setImageResource(R.drawable.btn_reject_icon);
                statusIv.setVisibility(View.VISIBLE);

                break;
            case 4:
                statusTv.setText("未审批(已过期)");
                statusTv.setTextColor(Color.parseColor("#b3b3b3"));
                statusIv.setVisibility(View.INVISIBLE);
                break;


            default:
//                statusTv.setText("[审批中]");
//                statusIv.setVisibility(View.INVISIBLE);

                break;

        }

    }

    public void showToast(final String str){
        getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Toast.makeText(getContext(),str,0).show();
            }
        });
    }


}
package com.szcomtop.meal.fragment;

import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.szcomtop.meal.R;
import com.szcomtop.meal.activity.ApplyDetailActivity;
import com.szcomtop.meal.common.CommonAdapter;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.common.OverAllStorage;
import com.szcomtop.meal.common.ViewHolder;
import com.szcomtop.meal.model.ApplyInfo;
import com.szcomtop.meal.model.Response;
import com.szcomtop.meal.views.CommonDialog;
import com.szcomtop.meal.views.SearchBar;
import com.zhy.http.okhttp.OkHttpUtils;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by wuming on 16/3/25.
 */
public class MyApplysFragment extends BaseFragment implements AdapterView.OnItemClickListener, TextWatcher {

    private static final String PAGE_SIZE = "10";
    private SearchBar mApprovedApplysSearchBar;
    private PullToRefreshListView mApprovedApplysListview;
    private List<ApplyInfo> showData = new ArrayList<>();
    private int pager = 0 ;
    private CommonAdapter<ApplyInfo> commonAdapter;
    private List<ApplyInfo> storeDate  = new ArrayList<>();
    private CommonDialog commonDialog;
    private boolean isSearch = false ;




    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {

        View inflate = inflater.inflate(R.layout.fragment_my_approved_applys, null);

        assignViews(inflate);
        initView();
        return inflate;

    }

    @Override
    public void onResume() {


        super.onResume();

        if (!isSearch){
            pager = 0 ;
            showData.clear();

            new GetDataTask().execute();
        }


        //  mApprovedApplysSearchBar.reset();
    }

    private void initView() {

        mApprovedApplysSearchBar.addTextChangedListener(this);
        mApprovedApplysListview.setMode(PullToRefreshBase.Mode.BOTH);
        mApprovedApplysListview.getRefreshableView().setOnItemClickListener(this);
        mApprovedApplysListview.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {
            @Override
            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {
                pager = 0 ;
                showData.clear();
                new GetDataTask().execute();
            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {

                new GetDataTask().execute();

            }
        });

       // mApprovedApplysListview.setRefreshing();

    }



    @Override
    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

    }

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {
        String aa = s.toString();
        if(TextUtils.isEmpty(aa)){
            isSearch = false ;

            return;
        }
        isSearch =true ;
        Pattern p = Pattern.compile(aa);
        List<ApplyInfo> searched = new ArrayList<ApplyInfo>();
        for (int i = 0; i < storeDate.size(); i++) {
            ApplyInfo applyInfo = storeDate.get(i);
            Matcher matcher = p.matcher(applyInfo.getName()+applyInfo.getReason());
            if (matcher.find()) {
                searched.add(applyInfo);
            }
        }
        showData.clear();
        showData.addAll(searched);
        mApprovedApplysListview.setMode(PullToRefreshBase.Mode.DISABLED);
       // mApprovedApplysListview.invalidate();

        if (commonAdapter != null){

            commonAdapter.notifyDataSetChanged();
        }
    }

    @Override
    public void afterTextChanged(Editable editable) {

    }

    public void onSelected() {
        mApprovedApplysSearchBar.reset();
        showData.clear();
        showData.addAll(storeDate) ;
        mApprovedApplysListview.setMode(PullToRefreshBase.Mode.BOTH);
        // mApprovedApplysListview.invalidate();
        if (commonAdapter != null){

            commonAdapter.notifyDataSetChanged();
        }
        mApprovedApplysSearchBar.addTextChangedListener(this);

    }


    private class GetDataTask extends AsyncTask<Void, Void, List<ApplyInfo>> {



        @Override
        protected List<ApplyInfo> doInBackground(Void... params) {
            // Simulates a background job.

            Log.i("wuming","==========> 0 ");
            try {
                String url =String.format(Consts.SERVER_PREFIX +"/mealbook/api/booking/task?keyword=");

                okhttp3.Response response = OkHttpUtils
                        .post()
                        .addParams("pageNumber", pager + "")
                        .addParams("pageSize", PAGE_SIZE)
                        .addParams("userId",OverAllStorage.getInstance().get("openId").toString())
                        .url(url)
                        .build()
                        .execute();
                if (response.code() == 200) {
                    //接口成功
                    String responseStr = response.body().string();
                    Log.i("wuming","responseStr:"+responseStr);
                    Gson gson = new Gson();
                    Response<ApplyInfo> res = gson.fromJson(responseStr, new TypeToken<Response<ApplyInfo>>() {
                    }.getType());
                    int state = res.getState();
                    if (state == 0) {
                        //成功获取到数据
                        pager++;
                        List<ApplyInfo> data = res.getData();
                        if (data == null || data.size() == 0){

                            showToast("没有更多数据了");
                        }
                        showData.addAll(data);
                        storeDate.clear();
                        storeDate.addAll(showData);
                        return showData;
                    } else {
                        //失败
                        showToast("获取数据失败");
                        storeDate.clear();
                        storeDate.addAll(showData);

                        return showData;
                    }

                } else {
                    //接口失败
                    showToast("获取数据失败");
                }

                Thread.sleep(1000);
            } catch (Exception e) {

                Log.e("wuming",e.toString());
                showToast("获取数据失败");

            }
            storeDate.clear();
            storeDate.addAll(showData);

            return showData;
        }

        @Override
        protected void onPostExecute(List<ApplyInfo> result) {

            Log.i("wuming","==========> 1 ");

            if (commonDialog != null && commonDialog.isShowing()){
                commonDialog.dismiss();
            }


            if (commonAdapter == null){
                doSu1cceed(result);
            }else {

                commonAdapter.notifyDataSetChanged();
            }

            // Call onRefreshComplete when the list has been refreshed.
            mApprovedApplysListview.onRefreshComplete();
        }
    }







    private void doSu1cceed(List<ApplyInfo> data) {
        commonAdapter = new CommonAdapter<ApplyInfo>(getActivity(), data, R.layout.apply_item) {


            @Override
            public void convert(ViewHolder holder, ApplyInfo applyInfo) {


                final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");

                holder.setText(R.id.apply_item_name, applyInfo.getName()+"的申请")
                        .setText(R.id.apply_item_time,  formatter.format(applyInfo.getCreateTime()));
                TextView statusTv = holder.getView(R.id.apply_item_state_tv);
                ImageView statusIv = holder.getView(R.id.apply_item_state_img);
                setStatus(applyInfo.getState(), statusTv, statusIv);
                ImageLoader.getInstance().displayImage(applyInfo.getAvatar(), (ImageView) holder.getView(R.id.apply_item_avatar));


            }
        };


        mApprovedApplysListview.getRefreshableView().setAdapter(commonAdapter);
    }


    private void assignViews(View inflate) {
        mApprovedApplysSearchBar = (SearchBar) inflate.findViewById(R.id.approved_applys_search_bar);
        mApprovedApplysListview = (PullToRefreshListView) inflate.findViewById(R.id.approved_applys_listview);
    }


    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
        Intent intent = new Intent(getActivity(), ApplyDetailActivity.class);

        intent.putExtra("applyInfo", showData.get(i-1));
        startActivity(intent);

    }
}
package com.szcomtop.meal.fragment;

import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.FragmentActivity;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.szcomtop.meal.R;
import com.szcomtop.meal.activity.ApproveDetailActivity;
import com.szcomtop.meal.activity.BaseActivity;
import com.szcomtop.meal.activity.MyApproveApplysActivity;
import com.szcomtop.meal.common.CommonAdapter;
import com.szcomtop.meal.common.Consts;
import com.szcomtop.meal.common.OverAllStorage;
import com.szcomtop.meal.common.ViewHolder;
import com.szcomtop.meal.model.ApplyInfo;
import com.szcomtop.meal.model.Response;
import com.szcomtop.meal.views.CommonDialog;
import com.szcomtop.meal.views.SearchBar;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.StringCallback;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import okhttp3.Call;

/**
 * Created by wuming on 16/3/25.
 */
public class MyApprovesFragment extends BaseFragment implements AdapterView.OnItemClickListener, TextWatcher {

    private static final String PAGE_SIZE = "10";
    private SearchBar mApprovedApplysSearchBar;
    private PullToRefreshListView mApprovedApplysListview;

    private List<ApplyInfo> waitToApproved = new ArrayList<>();

    private List<ApplyInfo> hadApproved = new ArrayList<>();
    private List<ApplyInfo> hadApprovedBk = new ArrayList<>();
    private BaseAdapter baseAdapter;
    private boolean isShowApproved = false;
    private int pager = 0;
    private GetApprovedDataTask getApprovedDataTask;
    private ArrayList<ApplyInfo> searched;
    private CommonDialog commonDialog;
    private  boolean isSearch = false;


    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {

        View inflate = inflater.inflate(R.layout.fragment_my_approved_applys, null);
        assignViews(inflate);
        initView();
        return inflate;

    }


    @Override
    public void onResume() {
        super.onResume();


        if (!isSearch){

            pager = 0 ;
            waitToApproved.clear();
            hadApproved.clear();
            isShowApproved =false ;



            getTodoTask();
            mApprovedApplysListview.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
        }


    }

    private void initView() {


        mApprovedApplysSearchBar.addTextChangedListener(this);

        mApprovedApplysListview.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
        mApprovedApplysListview.getRefreshableView().setOnItemClickListener(this);
        mApprovedApplysListview.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {
            @Override
            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {
                pager = 0 ;
                waitToApproved.clear();
                hadApproved.clear();
                isShowApproved =false ;



                getTodoTask();
                mApprovedApplysListview.setMode(PullToRefreshBase.Mode.PULL_FROM_START);

            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {

                new GetApprovedDataTask().execute();


            }
        });

        if (commonDialog == null){

            commonDialog = new CommonDialog(getActivity());
            commonDialog.setText("更新数据");
        }
        commonDialog.show();
        getTodoTask();
    }

    private void getTodoTask() {
        String url = Consts.SERVER_PREFIX +"/mealbook/api/booking/todo_task?keyword=";
        OkHttpUtils
                .post()
                .addParams("pageNumber", "0")
                .addParams("pageSize", "65536")
                .addParams("userId", OverAllStorage.getInstance().get("openId").toString())
                .url(url)
                .build()
                .execute(new StringCallback() {

                    @Override
                    public void onError(Call call, Exception e) {


                        if (commonDialog != null && commonDialog.isShowing()){
                            commonDialog.dismiss();
                        }

                        showToast("获取数据失败");


                        Log.i("wuming", "response:" + e.getMessage());
                    }

                    @Override
                    public void onResponse(String response) {



                        if (commonDialog != null && commonDialog.isShowing()){
                            commonDialog.dismiss();
                        }
                        // Call onRefreshComplete when the list has been refreshed.
                        mApprovedApplysListview.onRefreshComplete();

                        try {
                            Gson gson = new Gson();
                            Response<ApplyInfo> res = gson.fromJson(response, new TypeToken<Response<ApplyInfo>>() {
                            }.getType());
                            int state = res.getState();
                            if (state == 0) {
                                //成功
                                List<ApplyInfo> data = res.getData();
                                waitToApproved = data;
                                MyApproveApplysActivity activity = (MyApproveApplysActivity) getActivity();
                                activity.setRedDot(data.size()+"");
                                doSu1cceed(data);
                            } else {
                                //失败
                                showToast("获取数据失败");

                            }
                            Log.i("wuming", "response:" + response);

                        }catch (Exception e){

                            //失败
                            showToast("获取数据失败");


                            Log.i("wuming", "response:falied"  );

                        }


                        baseAdapter.notifyDataSetChanged();



                    }
                });
    }

    @Override
    public void beforeTextChanged(CharSequence s, int start, int before, int count) {


    }

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {

        mApprovedApplysListview.setMode(PullToRefreshBase.Mode.DISABLED);

        String aa = s.toString();
        if(TextUtils.isEmpty(aa)){

            isSearch = false ;
            mApprovedApplysListview.setMode(PullToRefreshBase.Mode.PULL_FROM_START);

            // mApprovedApplysListview.invalidate();
            if (baseAdapter != null){
                mApprovedApplysListview.setAdapter(baseAdapter);

            }
            return;
        }
        isSearch = true ;
        Pattern p = Pattern.compile(aa);
        searched = new ArrayList<ApplyInfo>();
        List<ApplyInfo> allData = new ArrayList<ApplyInfo>();
        allData.addAll(waitToApproved);
        allData.addAll(hadApprovedBk);

        for (int i = 0; i < allData.size(); i++) {
            ApplyInfo applyInfo = allData.get(i);
            Matcher matcher = p.matcher(applyInfo.getName()+applyInfo.getReason());
            if (matcher.find()) {
                searched.add(applyInfo);
                if (waitToApproved.contains(applyInfo)){
                    applyInfo.setApproved(false);
                }else {
                    applyInfo.setApproved(true);
                }
            }
        }


        MySearchAdapter mySearchAdapter = new MySearchAdapter();


        mApprovedApplysListview.getRefreshableView().setAdapter(mySearchAdapter);


    }

    @Override
    public void afterTextChanged(Editable editable) {

    }

    public void onSelected() {
        mApprovedApplysSearchBar.reset();
        pager = 0 ;
        waitToApproved.clear();
        hadApproved.clear();
        isShowApproved =false ;



        getTodoTask();
        mApprovedApplysListview.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
        mApprovedApplysSearchBar.addTextChangedListener(this);


    }


    private class GetApprovedDataTask extends AsyncTask<Void, Void, List<ApplyInfo>> {




        @Override
        protected List<ApplyInfo> doInBackground(Void... params) {
            // Simulates a background job.
            try {
                String url = Consts.SERVER_PREFIX +"/mealbook/api/booking/finish_task?keyword=";
                okhttp3.Response response = OkHttpUtils
                        .post()
                        .addParams("pageNumber", pager + "")
                        .addParams("pageSize", PAGE_SIZE)
                        .addParams("userId",OverAllStorage.getInstance().get("openId").toString())
                        .url(url)
                        .build()
                        .execute();

                Thread.sleep(1000);

                if (response.code() == 200) {
                    //接口成功
                    String responseStr = response.body().string();
                    Log.i("wuming","responseStr:"+responseStr);
                    Gson gson = new Gson();
                    Response<ApplyInfo> res = gson.fromJson(responseStr, new TypeToken<Response<ApplyInfo>>() {
                    }.getType());
                    int state = res.getState();
                    if (state == 0) {
                        //成功获取到数据
                        pager++;
                        List<ApplyInfo> data = res.getData();
                        if (data == null || data.size() == 0){

                            showToast("没有更多数据了");
                        }

                        hadApproved.addAll(data);

                        hadApprovedBk.clear();
                        hadApprovedBk.addAll(hadApproved);

                        return hadApproved;
                    } else {
                        //失败
                        showToast("获取数据失败");
                        return hadApproved;
                    }

                } else {
                    //接口失败
                    showToast("获取数据失败");
                }

            } catch (Exception e) {

                Log.e("wuming",e.toString());
                showToast("获取数据失败");

            }

            hadApprovedBk.clear();
            hadApprovedBk.addAll(hadApproved);
            return hadApproved;
        }

        @Override
        protected void onPostExecute(List<ApplyInfo> result) {

            if (commonDialog != null && commonDialog.isShowing()){
                commonDialog.dismiss();
            }
            mApprovedApplysListview.onRefreshComplete();

            baseAdapter.notifyDataSetChanged();

            // Call onRefreshComplete when the list has been refreshed.
            mApprovedApplysListview.setMode(PullToRefreshBase.Mode.BOTH);
        }
    }



    public class MySearchAdapter  extends BaseAdapter{

        @Override
        public int getCount() {
            return searched == null ? 0 :searched.size();
        }

        @Override
        public Object getItem(int i) {
            return i;
        }

        @Override
        public long getItemId(int i) {
            return i;
        }

        @Override
        public View getView(int i, View convertView, ViewGroup viewGroup) {


            ViewHolder viewHolder = null;
            if (null == convertView ) {
                //没有或不是item类型
                viewHolder = new ViewHolder();
                LayoutInflater mInflater = LayoutInflater.from(getContext());
                convertView = mInflater.inflate(R.layout.apply_item, null);

                viewHolder.avatar = (ImageView) convertView.findViewById(R.id.apply_item_avatar);
                viewHolder.stateTv = (TextView) convertView
                        .findViewById(R.id.apply_item_state_tv);
                viewHolder.name = (TextView) convertView
                        .findViewById(R.id.apply_item_name);
                viewHolder.time = (TextView) convertView
                        .findViewById(R.id.apply_item_time);
                viewHolder.stateImg = (ImageView) convertView
                        .findViewById(R.id.apply_item_state_img);

                convertView.setTag(viewHolder);
            } else {
                viewHolder = (ViewHolder) convertView.getTag();
            }

            ApplyInfo applyInfo = searched.get(i);


            if (null != applyInfo) {
                viewHolder.applyInfo = applyInfo;
                ImageLoader.getInstance().displayImage(applyInfo.getAvatar(), viewHolder.avatar);
                viewHolder.name.setText(applyInfo.getName()+"的申请");
                final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");

                viewHolder.time.setText( formatter.format( applyInfo.getCreateTime()));
                TextView statusTv = viewHolder.stateTv;
                ImageView statusIv = viewHolder.stateImg;
                setStatus(applyInfo.getState(), statusTv, statusIv);
            }

            return convertView;
        }
    }





    private void doSu1cceed(List<ApplyInfo> data) {


        baseAdapter = new BaseAdapter() {

            @Override
            public int getCount() {
                return waitToApproved.size() + hadApproved.size() + 1;
            }

            @Override
            public Object getItem(int i) {
                return i;
            }

            @Override
            public long getItemId(int i) {
                return i;
            }

            @Override
            public View getView(int i, View convertView, ViewGroup viewGroup) {

                if (i == waitToApproved.size()) {
                    //加载历史
                    View v = View.inflate(getContext(), R.layout.list_show_history_view, null);
                    TextView showHistoryTv = (TextView) v.findViewById(R.id.item_show_history_tv);
                    ImageView showHistoryIv = (ImageView) v.findViewById(R.id.item_show_history_iv);
                    if (isShowApproved){
                        showHistoryIv.setImageResource(R.drawable.date_btn_upward);
                        showHistoryTv.setText("点击隐藏历史记录");
                    }else {
                        showHistoryIv.setImageResource(R.drawable.date_btn_downward);
                        showHistoryTv.setText("点击显示历史记录");
                    }

                    v.setEnabled(false);
                    return v;
                } else {

                    ViewHolder viewHolder = null;
                    if (null == convertView || convertView.findViewById(R.id.apply_item_avatar) == null) {
                        //没有或不是item类型
                        viewHolder = new ViewHolder();
                        LayoutInflater mInflater = LayoutInflater.from(getContext());
                        convertView = mInflater.inflate(R.layout.apply_item, null);

                        viewHolder.avatar = (ImageView) convertView.findViewById(R.id.apply_item_avatar);
                        viewHolder.stateTv = (TextView) convertView
                                .findViewById(R.id.apply_item_state_tv);
                        viewHolder.name = (TextView) convertView
                                .findViewById(R.id.apply_item_name);
                        viewHolder.time = (TextView) convertView
                                .findViewById(R.id.apply_item_time);
                        viewHolder.stateImg = (ImageView) convertView
                                .findViewById(R.id.apply_item_state_img);

                        convertView.setTag(viewHolder);
                    } else {
                        viewHolder = (ViewHolder) convertView.getTag();
                    }

                    // set item values to the viewHolder:
                    ApplyInfo applyInfo = null;
                    if (i < waitToApproved.size()) {
                        applyInfo = waitToApproved.get(i);
                        if (applyInfo != null){

                            applyInfo.setApproved(false);
                        }

                    } else if (i > waitToApproved.size()) {
                        applyInfo = hadApproved.get(i - waitToApproved.size() - 1);
                        if (applyInfo != null){

                            applyInfo.setApproved(true);
                        }

                    }

                    if (null != applyInfo) {
                        viewHolder.applyInfo = applyInfo;
                        ImageLoader.getInstance().displayImage(applyInfo.getAvatar(), viewHolder.avatar);
                        viewHolder.name.setText(applyInfo.getName()+"的申请");
                        final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");

                        viewHolder.time.setText((String) formatter.format( applyInfo.getCreateTime()));
                        TextView statusTv = viewHolder.stateTv;
                        ImageView statusIv = viewHolder.stateImg;
                        setStatus(applyInfo.getState(), statusTv, statusIv);
                    }

                    return convertView;

                }

            }
        };

        mApprovedApplysListview.getRefreshableView().setAdapter(baseAdapter);

    }


    private void assignViews(View inflate) {
        mApprovedApplysSearchBar = (SearchBar) inflate.findViewById(R.id.approved_applys_search_bar);
        mApprovedApplysListview = (PullToRefreshListView) inflate.findViewById(R.id.approved_applys_listview);
    }


    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
        if (view.findViewById(R.id.apply_item_avatar) == null) {

            TextView showHistoryTv = (TextView) view.findViewById(R.id.item_show_history_tv);
            ImageView showHistoryIv = (ImageView) view.findViewById(R.id.item_show_history_iv);

            if (!isShowApproved) {
                //如果没有加载历史，加载
                pager = 0;
                mApprovedApplysListview.setMode(PullToRefreshBase.Mode.PULL_FROM_END);
                mApprovedApplysListview.invalidate();

                mApprovedApplysListview.setRefreshing();
                showHistoryIv.setImageResource(R.drawable.date_btn_upward);
                showHistoryTv.setText("点击隐藏历史记录");
               // mApprovedApplysListview.setMode(PullToRefreshBase.Mode.BOTH);


                isShowApproved = true;
            } else {
                //如果已加载，remove
                isShowApproved = false;
                hadApproved.clear();
                baseAdapter.notifyDataSetChanged();
                mApprovedApplysListview.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
                mApprovedApplysListview.invalidate();
                showHistoryIv.setImageResource(R.drawable.date_btn_downward);
                showHistoryTv.setText("点击显示历史记录");


            }

        } else {
            Intent intent = new Intent(getActivity(), ApproveDetailActivity.class);
            ViewHolder holder = (ViewHolder) view.getTag();
            ApplyInfo applyInfo = holder.applyInfo;
//
            intent.putExtra("isShowBtn",!applyInfo.isApproved());
            intent.putExtra("applyInfo", applyInfo);
            startActivity(intent);

        }

    }


    public class ViewHolder {

        public ImageView avatar;
        public TextView name;
        public TextView stateTv;
        public TextView time;
        public ImageView stateImg;
        public ApplyInfo applyInfo;
    }
}
package com.szcomtop.meal.model;

import java.util.List;

/**
 * Created by wuming on 16/4/21.
 */
public class ApplyApply {


    /**
     * diningPerson : [{"userId":"473b6b5a30284c4caa22370528347a9d","userName":"%25e9%2583%2591%25e6%2596%25b0%25e5%258d%258e"},{"userId":"54e681da9bb04c6895e9a1060810f5c2","userName":"%25e5%25bc%25a0%25e5%25b2%25a9"}]
     * bookingPerson : 36513da67bff4d8a82ccfa2144e3c386
     * stepFirst : 63616F6C69616E67
     * stepSecond : 6C697961736F6E67
     * diningRoomId : 1
     * stopDiningRoomId :
     * startTime : 2016-04-11 10:30
     * endTime : 2016-04-15 14:30
     * days : 5
     * dinner : 2016-4-25,2016-4-26,2016-4-27
     * reason : %25e5%2587%25ba%25e5%25b7%25ae%25e5%2587%25ba%25e5%25b7%25ae%25e5%2587%25ba%25e5%25b7%25ae%25e5%2587%25ba%25e5%25b7%25ae%25e5%2587%25ba%25e5%25b7%25ae%25e5%2587%25ba%25e5%25b7%25ae%25e5%2587%25ba%25e5%25b7%25ae
     */

    private String bookingPerson;
    private String stepFirst;
    private String stepSecond;
    private String diningRoomId;
    private String stopDiningRoomId;
    private String startTime;
    private String endTime;
    private String days;
    private String dinner;
    private String reason;
    private String dineNumber;

    public String getDineNumber() {
        return dineNumber;
    }

    public void setDineNumber(String dineNumber) {
        this.dineNumber = dineNumber;
    }

    /**
     * userId : 473b6b5a30284c4caa22370528347a9d
     * userName : %25e9%2583%2591%25e6%2596%25b0%25e5%258d%258e
     */



    private List<DiningPersonBean> diningPerson;

    public String getBookingPerson() {
        return bookingPerson;
    }

    public void setBookingPerson(String bookingPerson) {
        this.bookingPerson = bookingPerson;
    }

    public String getStepFirst() {
        return stepFirst;
    }

    public void setStepFirst(String stepFirst) {
        this.stepFirst = stepFirst;
    }

    public String getStepSecond() {
        return stepSecond;
    }

    public void setStepSecond(String stepSecond) {
        this.stepSecond = stepSecond;
    }

    public String getDiningRoomId() {
        return diningRoomId;
    }

    public void setDiningRoomId(String diningRoomId) {
        this.diningRoomId = diningRoomId;
    }

    public String getStopDiningRoomId() {
        return stopDiningRoomId;
    }

    public void setStopDiningRoomId(String stopDiningRoomId) {
        this.stopDiningRoomId = stopDiningRoomId;
    }

    public String getStartTime() {
        return startTime;
    }

    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    public String getEndTime() {
        return endTime;
    }

    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    public String getDays() {
        return days;
    }

    public void setDays(String days) {
        this.days = days;
    }

    public String getDinner() {
        return dinner;
    }

    public void setDinner(String dinner) {
        this.dinner = dinner;
    }

    public String getReason() {
        return reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    public List<DiningPersonBean> getDiningPerson() {
        return diningPerson;
    }

    public void setDiningPerson(List<DiningPersonBean> diningPerson) {
        this.diningPerson = diningPerson;
    }

    public static class DiningPersonBean {
        private String userId;
        private String userName;

        public String getUserId() {
            return userId;
        }

        public void setUserId(String userId) {
            this.userId = userId;
        }

        public String getUserName() {
            return userName;
        }

        public void setUserName(String userName) {
            this.userName = userName;
        }
    }
}
package com.szcomtop.meal.model;

import java.io.Serializable;
import java.util.List;

/**
 * Created by wuming on 2016/4/12.
 */
public class ApplyInfo  implements Serializable{


    /**
     * diningBookingId : 0001540527c4cc00
     * account : 36513da67bff4d8a82ccfa2144e3c386
     * name : 刘文鹏
     * avatar : http://eim2.szcomtop.com:6888/avatar/get_avatar?size=s&ownerId=36513da67bff4d8a82ccfa2144e3c386
     * orgName : 企业部门》我的测试部门
     * reason : 出差出差出差出差出差出差出差
     * createTime : 1460375373000
     * state : null
     * repastPersonnel : 郑新华,张岩
     * peopleNumber : 2
     * diningRoom : 食堂一
     * stopDiningRoom : null
     * startTime : 1460341800000
     * endTime : 1460701800000
     * days : 5
     * stepList : [{"name":"刘文鹏","avatar":"http://eim2.szcomtop.com:6888/avatar/get_avatar?size=s&ownerId=36513da67bff4d8a82ccfa2144e3c386","updateTime":1460375373000,"state":"2","reason":null},{"name":"曹梁","avatar":"http://eim2.szcomtop.com:6888/avatar/get_avatar?size=s&ownerId=63616F6C69616E67","updateTime":1460375373000,"state":"1","reason":null}]
     */

    private String diningBookingId;
    private String account;
    private String name;
    private String avatar;
    private String orgName;
    private String reason;
    private long createTime;
    private int state;
    private String repastPersonnel;
    private int peopleNumber;
    private String diningRoom;
    private String stopDiningRoom;
    private String dinner;
    private long startTime;
    private long endTime;
    private int days;
    private boolean isApproved;


    public boolean isApproved() {
        return isApproved;
    }

    public void setApproved(boolean approved) {
        isApproved = approved;
    }

    public String getDinner() {
        return dinner;
    }

    public void setDinner(String dinner) {
        this.dinner = dinner;
    }

    /**
     * name : 刘文鹏
     * avatar : http://eim2.szcomtop.com:6888/avatar/get_avatar?size=s&ownerId=36513da67bff4d8a82ccfa2144e3c386
     * updateTime : 1460375373000
     * state : 2
     * reason : null
     */



    private List<StepListEntity> stepList;

    public String getDiningBookingId() {
        return diningBookingId;
    }

    public void setDiningBookingId(String diningBookingId) {
        this.diningBookingId = diningBookingId;
    }

    public String getAccount() {
        return account;
    }

    public void setAccount(String account) {
        this.account = account;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public String getOrgName() {
        return orgName;
    }

    public void setOrgName(String orgName) {
        this.orgName = orgName;
    }

    public String getReason() {
        return reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    public long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(long createTime) {
        this.createTime = createTime;
    }

    public int getState() {
        return state;
    }

    public void setState(int state) {
        this.state = state;
    }

    public String getRepastPersonnel() {
        return repastPersonnel;
    }

    public void setRepastPersonnel(String repastPersonnel) {
        this.repastPersonnel = repastPersonnel;
    }

    public int getPeopleNumber() {
        return peopleNumber;
    }

    public void setPeopleNumber(int peopleNumber) {
        this.peopleNumber = peopleNumber;
    }

    public String getDiningRoom() {
        return diningRoom;
    }

    public void setDiningRoom(String diningRoom) {
        this.diningRoom = diningRoom;
    }

    public String getStopDiningRoom() {
        return stopDiningRoom;
    }

    public void setStopDiningRoom(String stopDiningRoom) {
        this.stopDiningRoom = stopDiningRoom;
    }

    public long getStartTime() {
        return startTime;
    }

    public void setStartTime(long startTime) {
        this.startTime = startTime;
    }

    public long getEndTime() {
        return endTime;
    }

    public void setEndTime(long endTime) {
        this.endTime = endTime;
    }

    public int getDays() {
        return days;
    }

    public void setDays(int days) {
        this.days = days;
    }

    public List<StepListEntity> getStepList() {
        return stepList;
    }

    public void setStepList(List<StepListEntity> stepList) {
        this.stepList = stepList;
    }

    public static class StepListEntity  implements Serializable{
        private String name;
        private String avatar;
        private long updateTime;
        private int state;
        private String reason;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getAvatar() {
            return avatar;
        }

        public void setAvatar(String avatar) {
            this.avatar = avatar;
        }

        public long getUpdateTime() {
            return updateTime;
        }

        public void setUpdateTime(long updateTime) {
            this.updateTime = updateTime;
        }

        public int getState() {
            return state;
        }

        public void setState(int state) {
            this.state = state;
        }

        public String getReason() {
            return reason;
        }

        public void setReason(String reason) {
            this.reason = reason;
        }
    }
}
package com.szcomtop.meal.model;

import java.io.Serializable;
import java.util.List;

/**
 * Created by wuming on 16/4/18.
 */
public class Carteen {


    /**
     * id : 00015409888ce301
     * roomList : [{"createDate":"2016-04-12 17:01:55","updateDate":"2016-04-12 17:01:55","id":"00015409b4a97900","regional":{"createDate":"2016-04-12 16:13:44","updateDate":"2016-04-12 16:13:44","id":"00015409888ce301","name":"三水供电局","sort":2},"roomName":"食堂二","state":"1","sort":2,"operator":{"createDate":"2016-04-11 15:04:25","updateDate":"2016-04-19 17:31:07","id":"473b6b5a30284c4caa22370528347a9d","name":"郑新华","account":"zhengxh","email":"zhengxinhua@szcomtop.com","phone":"15220072731","gender":"0","pinyin":"ZHENGXINHUA","pinyinSim":"ZXH"}}]
     * name : 三水供电局
     */

    private String id;
    private String name;
    /**
     * createDate : 2016-04-12 17:01:55
     * updateDate : 2016-04-12 17:01:55
     * id : 00015409b4a97900
     * regional : {"createDate":"2016-04-12 16:13:44","updateDate":"2016-04-12 16:13:44","id":"00015409888ce301","name":"三水供电局","sort":2}
     * roomName : 食堂二
     * state : 1
     * sort : 2
     * operator : {"createDate":"2016-04-11 15:04:25","updateDate":"2016-04-19 17:31:07","id":"473b6b5a30284c4caa22370528347a9d","name":"郑新华","account":"zhengxh","email":"zhengxinhua@szcomtop.com","phone":"15220072731","gender":"0","pinyin":"ZHENGXINHUA","pinyinSim":"ZXH"}
     */

    private List<RoomListBean> roomList;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<RoomListBean> getRoomList() {
        return roomList;
    }

    public void setRoomList(List<RoomListBean> roomList) {
        this.roomList = roomList;
    }

    public static class RoomListBean implements Serializable {
        private String createDate;
        private String updateDate;
        private String id;
        /**
         * createDate : 2016-04-12 16:13:44
         * updateDate : 2016-04-12 16:13:44
         * id : 00015409888ce301
         * name : 三水供电局
         * sort : 2
         */

        private RegionalBean regional;
        private String roomName;
        private String state;
        private int sort;
        /**
         * createDate : 2016-04-11 15:04:25
         * updateDate : 2016-04-19 17:31:07
         * id : 473b6b5a30284c4caa22370528347a9d
         * name : 郑新华
         * account : zhengxh
         * email : zhengxinhua@szcomtop.com
         * phone : 15220072731
         * gender : 0
         * pinyin : ZHENGXINHUA
         * pinyinSim : ZXH
         */

        private UserInfo operator;

        public String getCreateDate() {
            return createDate;
        }

        public void setCreateDate(String createDate) {
            this.createDate = createDate;
        }

        public String getUpdateDate() {
            return updateDate;
        }

        public void setUpdateDate(String updateDate) {
            this.updateDate = updateDate;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public RegionalBean getRegional() {
            return regional;
        }

        public void setRegional(RegionalBean regional) {
            this.regional = regional;
        }

        public String getRoomName() {
            return roomName;
        }

        public void setRoomName(String roomName) {
            this.roomName = roomName;
        }

        public String getState() {
            return state;
        }

        public void setState(String state) {
            this.state = state;
        }

        public int getSort() {
            return sort;
        }

        public void setSort(int sort) {
            this.sort = sort;
        }

        public UserInfo getOperator() {
            return operator;
        }

        public void setOperator(UserInfo operator) {
            this.operator = operator;
        }

        public static class RegionalBean  implements Serializable{
            private String createDate;
            private String updateDate;
            private String id;
            private String name;
            private int sort;

            public String getCreateDate() {
                return createDate;
            }

            public void setCreateDate(String createDate) {
                this.createDate = createDate;
            }

            public String getUpdateDate() {
                return updateDate;
            }

            public void setUpdateDate(String updateDate) {
                this.updateDate = updateDate;
            }

            public String getId() {
                return id;
            }

            public void setId(String id) {
                this.id = id;
            }

            public String getName() {
                return name;
            }

            public void setName(String name) {
                this.name = name;
            }

            public int getSort() {
                return sort;
            }

            public void setSort(int sort) {
                this.sort = sort;
            }
        }


    }
}
package com.szcomtop.meal.model;

/**
 * Created by wuming on 16/5/4.
 */
public class CarteenStastatic1 {

    /**
     * dineRoomId : 0001543d5ba9cf50b
     * dineRoomName : 食堂一
     * addNum : 84
     * reduceNum : 28
     * count : 56
     */

    private String dineRoomId;
    private String dineRoomName;
    private int addNum;
    private int reduceNum;
    private int count;

    public String getDineRoomId() {
        return dineRoomId;
    }

    public void setDineRoomId(String dineRoomId) {
        this.dineRoomId = dineRoomId;
    }

    public String getDineRoomName() {
        return dineRoomName;
    }

    public void setDineRoomName(String dineRoomName) {
        this.dineRoomName = dineRoomName;
    }

    public int getAddNum() {
        return addNum;
    }

    public void setAddNum(int addNum) {
        this.addNum = addNum;
    }

    public int getReduceNum() {
        return reduceNum;
    }

    public void setReduceNum(int reduceNum) {
        this.reduceNum = reduceNum;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }
}
package com.szcomtop.meal.model;

/**
 * Created by wuming on 16/5/4.
 */
public class QixinUser {

    String userId ;
    String userName ;

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;

    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public QixinUser(String userId, String userName) {
        this.userId = userId;
        this.userName = userName;
    }
}
package com.szcomtop.meal.model;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;

/**
 * Created by wuming on 2016/4/13.
 */
public class Response<T> {


    /**
     * state : 0
     * message : 获取我申请的任务列表成功！
     * data : [{"diningBookingId":"0001540527c4cc00","account":"36513da67bff4d8a82ccfa2144e3c386","name":"刘文鹏","avatar":"http://eim2.szcomtop.com:6888/avatar/get_avatar?size=s&ownerId=36513da67bff4d8a82ccfa2144e3c386","orgName":"企业部门》我的测试部门","reason":"出差出差出差出差出差出差出差","createTime":1460375373000,"state":null,"repastPersonnel":"郑新华,张岩","peopleNumber":2,"diningRoom":"食堂一","stopDiningRoom":null,"startTime":1460341800000,"endTime":1460701800000,"days":5,"stepList":[{"name":"刘文鹏","avatar":"http://eim2.szcomtop.com:6888/avatar/get_avatar?size=s&ownerId=36513da67bff4d8a82ccfa2144e3c386","updateTime":1460375373000,"state":"2","reason":null},{"name":"曹梁","avatar":"http://eim2.szcomtop.com:6888/avatar/get_avatar?size=s&ownerId=63616F6C69616E67","updateTime":1460375373000,"state":"1","reason":null}]}]
     */

    private int state;
    private String message;


    private List<T> data;

    public int getState() {
        return state;
    }

    public void setState(int state) {
        this.state = state;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public List<T> getData() {
        return data;
    }

    public void setData(List<T> data) {
        this.data = data;
    }





}
package com.szcomtop.meal.model;

import java.io.Serializable;

/**
 * Created by wuming on 2016/4/12.
 */
public class UserInfo  implements Serializable {

    /**
     * createDate : 2016-04-06 17:53:53
     * updateDate : 2016-04-06 17:53:53
     * id : 0001463bb81e402c
     * name : 方锋2
     * account : fangfeng2
     * email : chendazhou@szcomtop.com
     * phone : 18665065765
     * gender : 0
     * pinyin : FANGFENG2
     * pinyinSim : FF2
     */

    private String createDate;
    private String updateDate;
    private String id;
    private String name;
    private String account;
    private String email;
    private String phone;
    private String gender;
    private String pinyin;
    private String pinyinSim;

    public String getCreateDate() {
        return createDate;
    }

    public void setCreateDate(String createDate) {
        this.createDate = createDate;
    }

    public String getUpdateDate() {
        return updateDate;
    }

    public void setUpdateDate(String updateDate) {
        this.updateDate = updateDate;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAccount() {
        return account;
    }

    public void setAccount(String account) {
        this.account = account;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getPinyin() {
        return pinyin;
    }

    public void setPinyin(String pinyin) {
        this.pinyin = pinyin;
    }

    public String getPinyinSim() {
        return pinyinSim;
    }

    public void setPinyinSim(String pinyinSim) {
        this.pinyinSim = pinyinSim;
    }
}
package com.szcomtop.meal.plugin;

import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

/**
 * Created by wuming on 16/5/18.
 */
public class PluginApp implements BundleActivator {
    @Override
    public void onStart(BundleContext bundleContext) {

    }

    @Override
    public void onStop(BundleContext bundleContext) {

    }

}
package com.szcomtop.meal.utils;

import java.sql.SQLException;

import java.text.DateFormat;

import java.text.ParseException;

import java.text.SimpleDateFormat;

import java.util.Calendar;

import java.util.Date;







/**

 * @类描述：时间辅助类

 */

public class DateUtil {


    /**

     * java中的时间格式字符串没有秒<br>

     * 值 : yyyy-MM-dd HH:mm

     */

    public final static String JAVA_TIME_FORAMTER_1 = "yyyy-MM-dd HH:mm";


    /**

     * java中的时间格式字符串精确到秒<br>

     * 值 : yyyy-MM-dd HH:mm:ss

     */

    public final static String JAVA_TIME_FORAMTER_2 = "yyyy-MM-dd HH:mm:ss";


    /**

     * java中的时间格式字符串没有秒<br>

     * 值 : yyyyMMddHHmm

     */

    public final static String JAVA_TIME_FORAMTER_3 = "yyyyMMddHHmm";


    /**

     * java中的时间格式字符串精确到秒<br>

     * 值 : yyyyMMddHHmmss

     */

    public final static String JAVA_TIME_FORAMTER_4 = "yyyyMMddHHmmss";


    /**

     * java中的时间格式字符串<br>

     * 值 : HH:mm

     */

    public final static String JAVA_TIME_FORAMTER_5 = "HH:mm";


    /**

     * java中的时间格式字符串<br>

     * 值 : HH:mm:ss

     */

    public final static String JAVA_TIME_FORAMTER_6 = "HH:mm:ss";


    /**

     * java中的时间格式字符串精确到秒<br>

     * 值 : yyyy-MM-dd@HH:mm

     */

    public final static String JAVA_TIME_FORAMTER_7 = "yyyy-MM-dd@HH:mm";


    /**

     * java中的时间格式字符串精确到秒<br>

     * 值 : yyyy-MM-dd-HHmmss

     */

    public final static String JAVA_TIME_FORAMTER_8 = "yyyy-MM-dd-HHmmss";


    /**

     * java中的时间格式字符串精确到秒<br>

     * 值 : yyMMddHHmmss

     */

    public final static String JAVA_TIME_FORAMTER_9 = "yyMMddHHmmss";


    /**

     * java中的日期格式字符串<br>

     * 值 : yyyy-MM-dd

     */

    public final static String JAVA_DATE_FORAMTER_1 = "yyyy-MM-dd";


    /**

     * java中的日期格式字符串<br>

     * 值 : yyyy-MM

     */

    public final static String JAVA_DATE_FORAMTER_3 = "yyyy-MM";


    /**

     * java中的日期格式字符串<br>

     * 值 : yyyyMMdd

     */

    public final static String JAVA_DATE_FORAMTER_2 = "yyyyMMdd";


    /**

     * java中的日期格式字符串<br>

     * 值 : yyyyMM

     */

    public final static String JAVA_DATE_FORAMTER_MONTH="yyyyMM";



    /**

     * 数据库中的时间格式字符串没有秒<br>

     * 值 : yyyy-mm-dd hh24:mi

     */

    public final static String SQL_TIME_FORAMTER_1 = "yyyy-mm-dd hh24:mi";


    /**

     * 数据库中的时间格式字符串精确到秒<br>

     * 值 : yyyy-mm-dd hh24:mi:ss

     */

    public final static String SQL_TIME_FORAMTER_2 = "yyyy-mm-dd hh24:mi:ss";


    /**

     * 数据库中的时间格式字符串没有秒<br>

     * 值 : yyyymmddhh24mi

     */

    public final static String SQL_TIME_FORAMTER_3 = "yyyymmddhh24mi";


    /**

     * 数据库中的时间格式字符串精确到秒<br>

     * 值 : yyyymmddhh24miss

     */

    public final static String SQL_TIME_FORAMTER_4 = "yyyymmddhh24miss";


    /**

     * 数据库中的时间格式字符串<br>

     * 值 : hh24mi

     */

    public final static String SQL_TIME_FORAMTER_5 = "hh24mi";


    /**

     * 数据库中的时间格式字符串<br>

     * 值 : hh24miss

     */

    public final static String SQL_TIME_FORAMTER_6 = "hh24miss";


    /**

     * 数据库中的日期格式字符串<br>

     * 值 : yyyy-mm-dd

     */

    public final static String SQL_DATE_FORAMTER_1 = "yyyy-mm-dd";


    /**

     * 数据库中的日期格式字符串<br>

     * 值 : yyyymmdd

     */

    public final static String SQL_DATE_FORAMTER_2 = "yyyymmdd";


    /**

     * 得到一个格式化之后的时间

     * @param formaterStr 格式字符串

     * @param date 时间

     */

    public static String date2str(String formaterStr, Date date) {

        DateFormat tf = new SimpleDateFormat(formaterStr);

        return tf.format(date);

    }


    /**

     * 得到当前时间

     */

    public static Date getCurrentDate() {

        return Calendar.getInstance().getTime();

    }



//
//    public static synchronized String getCurrentDateHasDelay(String formaterStr) {
//
//        try {
//
//            Thread.currentThread().sleep(1000);//防止多线程时产生两个相同的时间
//
//        } catch (InterruptedException e) {
//
//            for(int i = 0; i < 1000; i++) {//出现异常时用程序延时计算一千万次
//
//
//
//                for(int j = 0; j < 10000; j++);
//
//            }
//
//        }
//
//        return getCurrentDateNotHasDelay(formaterStr);
//
//    }



    public static String getCurrentDateNotHasDelay(String formaterStr) {

        return date2str(formaterStr, getCurrentDate());

    }


//
//    public static String getCurrentDateNotHasDelay() {
//
//        return getCurrentDateNotHasDelay(JAVA_TIME_FORAMTER_2);
//
//    }



    public static Date str2date(String formaterStr, String param) {

        DateFormat tf = new SimpleDateFormat(formaterStr);

        Date date = null;

        try {

            date = tf.parse(param);

        } catch (ParseException e) {

            e.printStackTrace();

        }

        return date;

    }


    public static long time2long(String formaterStr, String time) {

        DateFormat tf = new SimpleDateFormat(formaterStr);

        long var = 0;

        try {

            var = tf.parse(time).getTime();

        } catch (ParseException e) {

            e.printStackTrace();

        }

        return var;

    }



    public static String long2time(String formaterStr, long timeLong) {

        DateFormat tf = new SimpleDateFormat(formaterStr);

        return tf.format(new Date(timeLong));

    }



//    public static String timeAfterDays(String formaterStr, String time, int days) {
//
//        return timeAfterHours(formaterStr, time, 24 * days);
//
//    }




    public static String timeAfterHours(String formaterStr, String time, int hours) {

        return timeAfterMinute(formaterStr, time, 60 * hours);

    }




    public static String timeAfterMinute(String formaterStr, String time, int minute) {


        long curTimeLong = time2long(formaterStr, time);

        long proTimeLong = ((curTimeLong / 1000L) + (60L * minute)) * 1000L;

        return long2time(formaterStr, proTimeLong);

    }



    /**

     * 根据日期字符串计算星期几

     */

    public static String calculateWeek(String formaterStr, String param) {

        Date date = str2date(formaterStr, param);

        DateFormat tf = new SimpleDateFormat("E");//E：代表是星期，F：代表周

        String weekStr = tf.format(date);// 格式：星期X

        return weekStr.substring(weekStr.length() - 1);// 返回:X

    }


    /**

     * 得到指定两日期相隔的天数

     */

//    public static int calculateDays(String formaterStr1, String dateStr1, String formaterStr2, String dateStr2) {
//
//        Date date1 = str2date(formaterStr1, dateStr1);
//
//        Date date2 = str2date(formaterStr2, dateStr2);
//
//        int days = (int)((date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24)) + 1;
//
//        return days;
//
//    }


    /**

     * 得到指定两日期相隔的天数

     */

//    public static int calculateDays(String formaterStr, String dateStr1, String dateStr2) {
//
//        return calculateDays(formaterStr, dateStr1, formaterStr, dateStr2);
//
//    }


    /**

     * 判断是否时间timeStr1小于时间timeStr2

     */

//    public static boolean time1LTTime2(String formaterStr1, String timeStr1,
//
//                                       String formaterStr2, String timeStr2) {
//
//        Date date1 = str2date(formaterStr1, timeStr1);
//
//        Date date2 = str2date(formaterStr2, timeStr2);
//
//        if(date2.getTime() - date1.getTime() > 0) {
//
//            return true;
//
//        } else {
//
//            return false;
//
//        }
//
//    }


    /**

     * 判断是否时间timeStr1小于等于时间timeStr2

     */

//    public static boolean time1LTEQTime2(String formaterStr1, String timeStr1,
//
//                                         String formaterStr2, String timeStr2) {
//
//        Date date1 = str2date(formaterStr1, timeStr1);
//
//        Date date2 = str2date(formaterStr2, timeStr2);
//
//        if(date2.getTime() - date1.getTime() >= 0) {
//
//            return true;
//
//        } else {
//
//            return false;
//
//        }
//
//    }


    /**

     * 判断是否时间timeStr1小于时间timeStr2

     */

//    public static boolean time1LTTime2(String formaterStr, String timeStr1, String timeStr2) throws ParseException {
//
//        return time1LTTime2(formaterStr, timeStr1, formaterStr, timeStr2);
//
//    }




    /**

     * 判断是否时间timeStr1小于等于时间timeStr2

     */

//    public static boolean time1LTEQTime2(String formaterStr, String timeStr1, String timeStr2) {
//
//        return time1LTEQTime2(formaterStr, timeStr1, formaterStr, timeStr2);
//
//    }


    /**

     * 时间格式的转换

     * @param proFmtStr 原来的格式

     * @param time 2009-8-1@23:1

     * @param afterFmtStr 要转换的格式

     * @return 2009-08-01@23:01

     */

    public static String formaterTime(String proFmtStr, String time, String afterFmtStr) {

        return date2str(afterFmtStr, str2date(proFmtStr, time));

    }


    /**

     * 格式化时间

     * @param time 2009-8-1@23:1

     * @return 2009-08-01@23:01

     */

//    public static String formaterTime(String formaterStr, String time) throws ParseException {
//
//        return formaterTime(formaterStr, time, formaterStr);
//
//    }


    /**

     * 功能：设置日期

     * @param date Date 需要设置的日期

     * @param field int 需要设置的字段

     * @param value int 设置的内容

     * @return Date 设置后的日期

     */
//
//    public static Date setDate(Date date, int field, int value) {
//
//        Calendar calendar = Calendar.getInstance();
//
//        calendar.setTime(date);
//
//        calendar.set(field, value);
//
//        return calendar.getTime();
//
//    }



    /**

     * 判断今天是否当前月的第一天

     * @return 是true, 否false

     */

//    public static boolean isFirstDay4Month() {
//
//        String now = getCurrentDateNotHasDelay(JAVA_DATE_FORAMTER_1);
//
//        if("01".equals(now.split("-")[2])) {
//
//            return true;
//
//        }
//
//        return false;
//
//    }



    /**

     * 判断今天是否是周日

     * @return 是true, 否false

     */

//    public static boolean isSunday() {
//
//        return isSunday(JAVA_DATE_FORAMTER_1, getCurrentDateNotHasDelay(JAVA_DATE_FORAMTER_1));
//
//    }


    /**

     * 判断今天是否是周日

     * @return 是true, 否false

     */

    public static boolean isSunday(String formaterStr, String day) {

        String week = calculateWeek(formaterStr, day);

        if("日".equals(week)) {

            return true;

        }

        return false;

    }


    /**

     * 判断是否是今天

     * @return 是true, 否false

     */

//    public static boolean isToday(String formaterStr, String time) {
//
//        String day = formaterTime(formaterStr, time, JAVA_DATE_FORAMTER_1);
//
//        String today = getCurrentDateNotHasDelay(JAVA_DATE_FORAMTER_1);
//
//        if(day.equals(today)) {
//
//            return true;
//
//        }
//
//        return false;
//
//    }


    /**

     * 得到一个月的天数

     */
//
//    public static int getDay4Month(String formaterStr, String time) {
//
//        Calendar rightNow = Calendar.getInstance();
//
//        rightNow.setTime(str2date(formaterStr, time));
//
//        return rightNow.getActualMaximum(Calendar.DAY_OF_MONTH);
//
//    }


    /**

     * 得到两个月之间的天数

     */

//    public static int getDay4TwainMonth(String formaterStr, String time, String formaterStr1, String time1) {
//
//        int days = 0;
//
//        String iTime = formaterTime(formaterStr, time, JAVA_DATE_FORAMTER_3);
//
//        String endTime = formaterTime(formaterStr1, time1, JAVA_DATE_FORAMTER_3);
//
//        if(!time1LTEQTime2(JAVA_DATE_FORAMTER_3, iTime, endTime)) {
//
//            return days;
//
//        }
//
//        do {
//
//            days += getDay4Month(JAVA_DATE_FORAMTER_3, iTime);
//
//            iTime = getNextMonth(JAVA_DATE_FORAMTER_3, iTime);
//
//        } while (iTime.equals(endTime));
//
//        return days;
//
//    }


    /**

     * 得到下一个月份

     * @return 返回的下个月， 格式: yyyy-mm

     */

    public static String getNextMonth(String formaterStr, String time) {

        String m = formaterTime(formaterStr, time, JAVA_DATE_FORAMTER_3);

        int y = Integer.parseInt(m.split("-")[0]);

        int nm = Integer.parseInt(m.split("-")[1]) + 1;

        String nextMonth = nm + "";

        if(nm < 10) {

            nextMonth = "0" + nm;

        } else {

            if(nm == 13) {

                y++;

                nextMonth = "01";

            }

        }

        return y + "-" + nextMonth;

    }


    /**

     * 得到上一个月份

     * @return 返回的上个月， 格式: yyyy-mm

     */
//
//    public static String getPreMonth(String formaterStr, String time) {
//
//        String m = formaterTime(formaterStr, time, JAVA_DATE_FORAMTER_3);
//
//        int y = Integer.parseInt(m.split("-")[0]);
//
//        int pm = Integer.parseInt(m.split("-")[1]) - 1;
//
//        String nextMonth = pm + "";
//
//        if(pm < 10) {
//
//            nextMonth = "0" + pm;
//
//        } else {
//
//            if(pm == 0) {
//
//                y--;
//
//                nextMonth = "01";
//
//            }
//
//        }
//
//        return y + "-" + nextMonth;
//
//    }


    /**

     * 得到一个月的第一天日期

     * @return 返回的下个月， 格式: yyyy-mm-01

     */

//    public static String getMonthFirstDay(String formaterStr, String time) {
//
//        String m = formaterTime(formaterStr, time, JAVA_DATE_FORAMTER_3);
//
//        return m + "-01";
//
//    }


    /**

     * 得到上一个月份最后一天

     * @return 返回的上个月， 格式: yyyy-mm-dd

     */
//
//    public static String getPreMonthLastDay(String formaterStr, String time) {
//
//        Calendar rightNow = Calendar.getInstance();
//
//        rightNow.setTime(str2date(formaterStr, time));
//
//        rightNow.set(Calendar.DAY_OF_MONTH, 1);
//
//        rightNow.add(Calendar.DAY_OF_MONTH, -1);
//
//        return date2str(JAVA_DATE_FORAMTER_1, rightNow.getTime());
//
//    }

//yyyy-mm-dd hh:mm:ss 转成yyyymmddhhmmss

//    public static String datechange(String date){
//
//        return (date.replaceAll("-", "").replaceAll(":", "").replaceAll(" ", "")).trim();
//
//    }



    public static String calculateDaysToString(Date date1,Date date2) {

        long calculates = date2.getTime() - date1.getTime();


        return calculates/(1000 * 60 * 60)+"小时"+(calculates%(1000 * 60 * 60))/(1000 * 60)+"分钟";

    }


}package com.szcomtop.meal.utils;

import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;

public class ViewUtils {
	/** 把自身从父View中移除 */
	public static void removeSelfFromParent(View view) {
		if (view != null) {
			ViewParent parent = view.getParent();
			if (parent != null && parent instanceof ViewGroup) {
				ViewGroup group = (ViewGroup) parent;
				group.removeView(view);
			}
		}
	}

	/** 请求View树重新布局，用于解决中层View有布局状态而导致上层View状态断裂 */
	public static void requestLayoutParent(View view, boolean isAll) {
		ViewParent parent = view.getParent();
		while (parent != null && parent instanceof View) {
			if (!parent.isLayoutRequested()) {
				parent.requestLayout();
				if (!isAll) {
					break;
				}
			}
			parent = parent.getParent();
		}
	}

	/** 判断触点是否落在该View上 */
	public static boolean isTouchInView(MotionEvent ev, View v) {
		int[] vLoc = new int[2];
		v.getLocationOnScreen(vLoc);
		float motionX = ev.getRawX();
		float motionY = ev.getRawY();
		return motionX >= vLoc[0] && motionX <= (vLoc[0] + v.getWidth()) && motionY >= vLoc[1] && motionY <= (vLoc[1] + v.getHeight());
	}

	/** FindViewById的泛型封装，减少强转代码 */
	public static <T extends View> T findViewById(View layout, int id) {
		return (T) layout.findViewById(id);
	}
}
package com.szcomtop.meal.views;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.widget.ImageView;

import com.szcomtop.meal.R;

/**
 *
 * android circle imageView
 * @author Block Cheng
 *
 */
public class CircleImageView extends ImageView {

    private static final ScaleType SCALE_TYPE = ScaleType.CENTER_CROP;

    private static final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;
    private static final int COLORDRAWABLE_DIMENSION = 1;

    private static final int DEFAULT_BORDER_WIDTH = 0;
    private static final int DEFAULT_BORDER_COLOR = Color.TRANSPARENT;

    private final RectF mDrawableRect = new RectF();
    private final RectF mBorderRect = new RectF();

    private final Matrix mShaderMatrix = new Matrix();
    private final Paint mBitmapPaint = new Paint();
    private final Paint mBorderPaint = new Paint();

    private int mBorderColor = DEFAULT_BORDER_COLOR;
    private int mBorderWidth = DEFAULT_BORDER_WIDTH;

    private Bitmap mBitmap;
    private BitmapShader mBitmapShader;
    private int mBitmapWidth;
    private int mBitmapHeight;

    private float mDrawableRadius;
    private float mBorderRadius;

    private boolean mReady;
    private boolean mSetupPending;

    public CircleImageView(Context context) {
        super(context);
    }

    public CircleImageView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public CircleImageView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        super.setScaleType(SCALE_TYPE);

        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleImageView, defStyle, 0);

        mBorderWidth = a.getDimensionPixelSize(R.styleable.CircleImageView_border_width, DEFAULT_BORDER_WIDTH);
        mBorderColor = a.getColor(R.styleable.CircleImageView_border_color, DEFAULT_BORDER_COLOR);

        a.recycle();

        mReady = true;

        if (mSetupPending) {
            setup();
            mSetupPending = false;
        }
    }

    @Override
    public ScaleType getScaleType() {
        return SCALE_TYPE;
    }

    @Override
    public void setScaleType(ScaleType scaleType) {
        if (scaleType != SCALE_TYPE) {
            throw new IllegalArgumentException(String.format("ScaleType %s not supported.", scaleType));
        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        if (getDrawable() == null) {
            return;
        }

        canvas.drawCircle(getWidth() / 2, getHeight() / 2, mDrawableRadius, mBitmapPaint);
        canvas.drawCircle(getWidth() / 2, getHeight() / 2, mBorderRadius, mBorderPaint);
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        setup();
    }

    public int getBorderColor() {
        return mBorderColor;
    }

    public void setBorderColor(int borderColor) {
        if (borderColor == mBorderColor) {
            return;
        }

        mBorderColor = borderColor;
        mBorderPaint.setColor(mBorderColor);
        invalidate();
    }

    public int getBorderWidth() {
        return mBorderWidth;
    }

    public void setBorderWidth(int borderWidth) {
        if (borderWidth == mBorderWidth) {
            return;
        }

        mBorderWidth = borderWidth;
        setup();
    }

    @Override
    public void setImageBitmap(Bitmap bm) {
        super.setImageBitmap(bm);
        mBitmap = bm;
        setup();
    }

    @Override
    public void setImageDrawable(Drawable drawable) {
        super.setImageDrawable(drawable);
        mBitmap = getBitmapFromDrawable(drawable);
        setup();
    }

    @Override
    public void setImageResource(int resId) {
        super.setImageResource(resId);
        mBitmap = getBitmapFromDrawable(getDrawable());
        setup();
    }

    private Bitmap getBitmapFromDrawable(Drawable drawable) {
        if (drawable == null) {
            return null;
        }

        if (drawable instanceof BitmapDrawable) {
            return ((BitmapDrawable) drawable).getBitmap();
        }

        try {
            Bitmap bitmap;

            if (drawable instanceof ColorDrawable) {
                bitmap = Bitmap.createBitmap(COLORDRAWABLE_DIMENSION, COLORDRAWABLE_DIMENSION, BITMAP_CONFIG);
            } else {
                bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), BITMAP_CONFIG);
            }

            Canvas canvas = new Canvas(bitmap);
            drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
            drawable.draw(canvas);
            return bitmap;
        } catch (OutOfMemoryError e) {
            return null;
        }
    }

    private void setup() {
        if (!mReady) {
            mSetupPending = true;
            return;
        }

        if (mBitmap == null) {
            return;
        }

        mBitmapShader = new BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);

        mBitmapPaint.setAntiAlias(true);
        mBitmapPaint.setShader(mBitmapShader);

        mBorderPaint.setStyle(Paint.Style.STROKE);
        mBorderPaint.setAntiAlias(true);
        mBorderPaint.setColor(mBorderColor);
        mBorderPaint.setStrokeWidth(mBorderWidth);

        mBitmapHeight = mBitmap.getHeight();
        mBitmapWidth = mBitmap.getWidth();

        mBorderRect.set(0, 0, getWidth(), getHeight());
        mBorderRadius = Math.min((mBorderRect.height() - mBorderWidth) / 2, (mBorderRect.width() - mBorderWidth) / 2);

        mDrawableRect.set(mBorderWidth, mBorderWidth, mBorderRect.width() - mBorderWidth, mBorderRect.height() - mBorderWidth);
        mDrawableRadius = Math.min(mDrawableRect.height() / 2, mDrawableRect.width() / 2);

        updateShaderMatrix();
        invalidate();
    }

    private void updateShaderMatrix() {
        float scale;
        float dx = 0;
        float dy = 0;

        mShaderMatrix.set(null);

        if (mBitmapWidth * mDrawableRect.height() > mDrawableRect.width() * mBitmapHeight) {
            scale = mDrawableRect.height() / (float) mBitmapHeight;
            dx = (mDrawableRect.width() - mBitmapWidth * scale) * 0.5f;
        } else {
            scale = mDrawableRect.width() / (float) mBitmapWidth;
            dy = (mDrawableRect.height() - mBitmapHeight * scale) * 0.5f;
        }

        mShaderMatrix.setScale(scale, scale);
        mShaderMatrix.postTranslate((int) (dx + 0.5f) + mBorderWidth, (int) (dy + 0.5f) + mBorderWidth);

        mBitmapShader.setLocalMatrix(mShaderMatrix);
    }

}package com.szcomtop.meal.views;

import android.app.Dialog;
import android.content.Context;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.szcomtop.meal.R;


public class CommonConfirmDialog extends Dialog {

	private final TextView titleTv;
	private TextView contentTv;
	private Button btnCancle;
	private Button btnOk;

	public CommonConfirmDialog(Context context) {
		super(context, R.style.dialog);
		this.setContentView(R.layout.phone_confirm_dialog);
		titleTv = (TextView) findViewById(R.id.phone_confirm_dialog_title);
		contentTv = (TextView) findViewById(R.id.phone_confirm_dialog_content);
		btnCancle = (Button)findViewById(R.id.phone_confirm_dialog_btn_cancle);
		btnOk = (Button)findViewById(R.id.phone_confirm_dialog_btn_ok);
		
		btnCancle.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(isShowing()){
					dismiss();
				}
			}
		});
		
		// TODO Auto-generated constructor stub
	}
	
	
	public CommonConfirmDialog(Context context, String content){
		this(context);
		setContent(content);
		
	}


	public CommonConfirmDialog(Context context, String title, String content, String positiveStr , String negativeStr){
		this(context);

		titleTv.setText(title);
		setContent(content);
		btnOk.setText(positiveStr);
		btnCancle.setText(negativeStr);

	}

	

	public CommonConfirmDialog setContent(String content) {
		contentTv.setText(content);
		return this;
	}

	

	
	
	public CommonConfirmDialog setPositiveButtonListener(View.OnClickListener l){
		btnOk.setOnClickListener(l);
		return this;
	}
	
	
	
}
package com.szcomtop.meal.views;

import android.app.Dialog;
import android.content.Context;
import android.widget.TextView;

import com.szcomtop.meal.R;


public class CommonDialog extends Dialog {

	private TextView tv;

	public CommonDialog(Context context) {
		super(context, R.style.dialog);
		this.setContentView(R.layout.common_dialog);
		this.setCancelable(false);
		tv = (TextView) findViewById(R.id.dialog_tv);
		
		// TODO Auto-generated constructor stub
	}
	
	public CommonDialog setText(String text){
		tv.setText(text);
		return this;
	}

	
}
package com.szcomtop.meal.views;

import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v4.app.FragmentTransaction;
import android.util.AttributeSet;
import android.widget.FrameLayout;

import com.roomorama.caldroid.CaldroidFragment;
import com.szcomtop.meal.R;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * Created by wuming on 16/4/18.
 */
public class DatePickerView  extends FrameLayout {

    private CaldroidFragment caldroidFragment;

    private FragmentTransaction t;

    public DatePickerView(Context context,FragmentTransaction t) {
        super(context);

        this.t = t ;
        initView();
    }

    private void setCustomResourceForDates() {
        Calendar cal = Calendar.getInstance();

        // Min date is last 7 days
        cal.add(Calendar.DATE, -7);
        Date blueDate = cal.getTime();

        // Max date is next 7 days
        cal = Calendar.getInstance();
        cal.add(Calendar.DATE, 7);
        Date greenDate = cal.getTime();

        if (caldroidFragment != null) {
            // ColorDrawable blue = new ColorDrawable(getResources().getColor(R.color.blue));
            ColorDrawable green = new ColorDrawable(Color.GREEN);
            //caldroidFragment.setBackgroundDrawableForDate(blue, blueDate);
            caldroidFragment.setBackgroundDrawableForDate(green, greenDate);
            caldroidFragment.setTextColorForDate(R.color.white, blueDate);
            caldroidFragment.setTextColorForDate(R.color.white, greenDate);
        }
    }

    private void initView() {

        final SimpleDateFormat formatter = new SimpleDateFormat("dd MMM yyyy");

        // Setup caldroid fragment
        // **** If you want normal CaldroidFragment, use below line ****
        caldroidFragment = new CaldroidFragment();

        Bundle args = new Bundle();
        Calendar cal = Calendar.getInstance();
        args.putInt(CaldroidFragment.MONTH, cal.get(Calendar.MONTH) + 1);
        args.putInt(CaldroidFragment.YEAR, cal.get(Calendar.YEAR));
        args.putBoolean(CaldroidFragment.ENABLE_SWIPE, true);
        args.putBoolean(CaldroidFragment.SIX_WEEKS_IN_CALENDAR, true);

        // Uncomment this to customize startDayOfWeek
        // args.putInt(CaldroidFragment.START_DAY_OF_WEEK,
        // CaldroidFragment.TUESDAY); // Tuesday

        // Uncomment this line to use Caldroid in compact mode
        // args.putBoolean(CaldroidFragment.SQUARE_TEXT_VIEW_CELL, false);

        // Uncomment this line to use dark theme
//            args.putInt(CaldroidFragment.THEME_RESOURCE, com.caldroid.R.style.CaldroidDefaultDark);

        caldroidFragment.setArguments(args);

        setCustomResourceForDates();

        // Attach to the activity
        t.replace(R.id.calendar1, caldroidFragment);
        t.commit();

    }
}
package com.szcomtop.meal.views;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.szcomtop.meal.R;
import com.szcomtop.meal.views.wheelView.FrameView;
import com.szcomtop.meal.views.wheelView.LoopView;
import com.szcomtop.meal.views.wheelView.OnItemSelectedListener;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * Created by wuming on 16/4/5.
 */
public class DateWheelView extends RelativeLayout {

    private FrameView framview;
    private int firstLineY;
    private int secondLineY;


    private LinearLayout rootview;
    private LoopView loopview1;
    private LoopView loopview2;
    private LoopView loopview3;
    private LoopView loopview4;
    private String mStartYear;
    private String mStartMonth;
    private String mEndYear;
    private String mEndMonth;

    private void assignViews(View dateWheelView) {
        rootview = (LinearLayout) dateWheelView.findViewById(R.id.rootview);
        loopview1 = (LoopView) dateWheelView.findViewById(R.id.loopview1);
        loopview2 = (LoopView) dateWheelView.findViewById(R.id.loopview2);
        loopview3 = (LoopView) dateWheelView.findViewById(R.id.loopview3);
        loopview4 = (LoopView) dateWheelView.findViewById(R.id.loopview4);
        framview = (FrameView) dateWheelView.findViewById(R.id.frameView);
    }

    public DateWheelView(Context context) {
        super(context);
        initView();
    }

    public DateWheelView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView();

    }

    public DateWheelView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initView();

    }


    public static List<Date> findDates(Date dBegin, Date dEnd) {
        List lDate = new ArrayList();
        lDate.add(dBegin);
        Calendar calBegin = Calendar.getInstance();
        // 使用给定的 Date 设置此 Calendar 的时间
        calBegin.setTime(dBegin);
        Calendar calEnd = Calendar.getInstance();
        // 使用给定的 Date 设置此 Calendar 的时间
        calEnd.setTime(dEnd);
        // 测试此日期是否在指定日期之后
        while (dEnd.after(calBegin.getTime())) {
            // 根据日历的规则，为给定的日历字段添加或减去指定的时间量
            calBegin.add(Calendar.DAY_OF_MONTH, 1);
            lDate.add(calBegin.getTime());
        }
        return lDate;
    }


    public void initView(){

       View dateWheelView =  View.inflate(getContext(),R.layout.date_wheel_view,null);
        addView(dateWheelView,LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
        assignViews(dateWheelView);


        final ArrayList<String> year = new ArrayList<>();
        for (int i = 0; i < 30; i++) {
            year.add( (2010+i)+"年");
        }

        final ArrayList<String> month = new ArrayList<>();
        for (int i = 1; i < 13; i++) {
            month.add(i+"");
        }


        Calendar calendar = Calendar.getInstance();
        int yearnum = calendar.get(Calendar.YEAR);
        int yearDis = yearnum - 2010;
        int monthNum = calendar.get(Calendar.MONTH);


        //设置原始数据
        loopview1.setItems(year);
        //设置初始位置
        loopview1.setInitPosition(yearDis);

        mStartYear = year.get(yearDis);

        //设置字体大小
        loopview1.setTextSize(18);
        loopview1.measure(0,0);
        firstLineY = loopview1.getFirstLineY();
        secondLineY = loopview1.getSecondLineY();

        loopview1.setListener(new OnItemSelectedListener() {
            @Override
            public void onItemSelected(int index) {


                mStartYear = year.get(index);

            }
        });



        loopview2.setItems(month);
        loopview2.setInitPosition(monthNum);
        mStartMonth = month.get(monthNum);
        loopview2.setTextSize(18);

        loopview2.setListener(new OnItemSelectedListener() {
            @Override
            public void onItemSelected(int index) {

                mStartMonth = month.get(index);

            }
        });

        //设置原始数据
        loopview3.setItems(year);
        //设置初始位置
        loopview3.setInitPosition(yearDis);
        mEndYear = year.get(yearDis);
        //设置字体大小
        loopview3.setTextSize(18);

        loopview3.setListener(new OnItemSelectedListener() {
            @Override
            public void onItemSelected(int index) {

                mEndYear = year.get(index);

            }
        });


        loopview4.setItems(month);
        loopview4.setInitPosition(monthNum);
        mEndMonth = month.get(monthNum);
        loopview4.setTextSize(18);


        loopview4.setListener(new OnItemSelectedListener() {
            @Override
            public void onItemSelected(int index) {

                mEndMonth = month.get(index);
            }
        });



        framview.set(firstLineY,secondLineY);
    }


    public  String  getStartTime(){
        String year = mStartYear.replace("年", "");
        java.text.DecimalFormat format = new java.text.DecimalFormat("00");
        String format1 = format.format(Integer.valueOf(mStartMonth));
        String res = String.format("%4s-%s-01", year, format1);
        return  res;
    }


    public  String  getEndTime(){
        String year = mEndYear.replace("年", "");
        java.text.DecimalFormat format = new java.text.DecimalFormat("00");

        String format1 = format.format(Integer.valueOf(mEndMonth));
        String res = String.format("%4s-%s-01", year, format1);
        return  res;
    }


}
package com.szcomtop.meal.views;

import android.content.Context;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.szcomtop.meal.R;


/**
 * 公共头部Titel布局
 * 
 * @author yangzhao
 * 
 */
public class HeadView extends LinearLayout implements OnClickListener {
	
	/**
	 * 只显示中间TextView
	 */
	public static final int TYPE_CENTERONLY = 0;
	/**
	 * 只显示左边按钮
	 */
	public static final int TYPE_LEFTONLY = 1;
	/**
	 * 只显示右边Button
	 */
	public static final int TYPE_RIGHTBTN_ONLY = 2;
	/**
	 * 只右边ImageButton
	 */
	public static final int TYPE_RIGHTIBTN_ONLY = 3;
	/**
	 * 显示左边Button和右边Button
	 */
	public static final int TYPE_LRIGHTBTN = 4;
	/**
	 * 显示左边Button和右边ImageButton
	 */
	public static final int TYPE_LRIGHTIBTN = 5;
	
	private OnHeadClickListener onClickListener = null;
	private OnHeadDoubleClickListener onDoubleClickListener = null;
	private ImageButton btnBack;
	private TextView tvHeadCenter;
	private Button btnHeadRight;
	private ImageButton ibtnHeadRight;
	private View includeHead;
	private ImageView btnHeadAddedRight;
	
	private View lytConnecting;
	private ImageView ivConnectLoading;
	private TextView tvUnavaliable;
	
	private Button tvGroupLeft;
	private Button tvGroupRight;
	
	public HeadView(Context context) {
		super(context);
		initView(context);
	}
	
	public HeadView(Context context,int TYPE,
			OnHeadInitListener onHeadInitListener) {
		super(context);
		initView(context);
	}
	
	public HeadView(Context context, AttributeSet attrs) {
		super(context, attrs);
		initView(context);
	}

	/**
	 * 设置控件初始化背景，文字资源
	 * @param TYPE
	 * @param onHeadInitListener
	 */
	public void setHeadParams(int TYPE, OnHeadInitListener onHeadInitListener) {
		switch (TYPE) {
		case TYPE_CENTERONLY:
			btnBack.setVisibility(View.GONE);
			btnHeadRight.setVisibility(View.GONE);
			ibtnHeadRight.setVisibility(View.GONE);
			tvHeadCenter.setVisibility(View.VISIBLE);
			if (onHeadInitListener != null) {
				onHeadInitListener.initCenterTv(tvHeadCenter);
			}
			break;
		case TYPE_LEFTONLY:
			btnBack.setVisibility(View.VISIBLE);
			btnHeadRight.setVisibility(View.GONE);
			ibtnHeadRight.setVisibility(View.GONE);
			tvHeadCenter.setVisibility(View.VISIBLE);
			if (onHeadInitListener != null) {
				onHeadInitListener.initCenterTv(tvHeadCenter);
				onHeadInitListener.initLeftBtn(btnBack);
			}
			break;
		case TYPE_RIGHTBTN_ONLY:
			btnBack.setVisibility(View.GONE);
			btnHeadRight.setVisibility(View.VISIBLE);
			ibtnHeadRight.setVisibility(View.GONE);
			tvHeadCenter.setVisibility(View.VISIBLE);
			if (onHeadInitListener != null) {
				onHeadInitListener.initCenterTv(tvHeadCenter);
				onHeadInitListener.initRightBtn(btnHeadRight);
			}
			break;
		case TYPE_RIGHTIBTN_ONLY:
			btnBack.setVisibility(View.GONE);
			btnHeadRight.setVisibility(View.GONE);
			ibtnHeadRight.setVisibility(View.VISIBLE);
			tvHeadCenter.setVisibility(View.VISIBLE);
			if (onHeadInitListener != null) {
				onHeadInitListener.initCenterTv(tvHeadCenter);
				onHeadInitListener.initRightIBtn(ibtnHeadRight);
			}
			break;
		case TYPE_LRIGHTBTN:
			btnBack.setVisibility(View.VISIBLE);
			btnHeadRight.setVisibility(View.VISIBLE);
			ibtnHeadRight.setVisibility(View.GONE);
			tvHeadCenter.setVisibility(View.VISIBLE);
			if (onHeadInitListener != null) {
				onHeadInitListener.initLeftBtn(btnBack);
				onHeadInitListener.initCenterTv(tvHeadCenter);
				onHeadInitListener.initRightBtn(btnHeadRight);
			}
			break;
		case TYPE_LRIGHTIBTN:
			btnBack.setVisibility(View.VISIBLE);
			btnHeadRight.setVisibility(View.GONE);
			ibtnHeadRight.setVisibility(View.VISIBLE);
			tvHeadCenter.setVisibility(View.VISIBLE);
			if (onHeadInitListener != null) {
				onHeadInitListener.initLeftBtn(btnBack);
				onHeadInitListener.initCenterTv(tvHeadCenter);
				onHeadInitListener.initRightIBtn(ibtnHeadRight);
			}
			break;
		default:
			break;
		}
	}
	
	public void showLoading(Context context) {
		lytConnecting.setVisibility(View.VISIBLE);
		tvHeadCenter.setVisibility(View.GONE);
		RotateAnimation anim=new RotateAnimation(0.0f, +350.0f,    
	               Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF, 0.5f);
		anim.setRepeatCount(-1);
		anim.setRepeatMode(Animation.RESTART);    
		anim.setDuration(500);
		ivConnectLoading.setImageResource(R.drawable.loading_progress);
		ivConnectLoading.setVisibility(View.VISIBLE);
		ivConnectLoading.setAnimation(anim);
		tvUnavaliable.setText("连接中...");
		anim.start();
	}
	
	public void hideLoading() {
		if(ivConnectLoading != null && ivConnectLoading.getAnimation()!=null)
			ivConnectLoading.getAnimation().cancel();
		ivConnectLoading.setVisibility(View.GONE);
		ivConnectLoading.setImageBitmap(null);
		lytConnecting.setVisibility(View.GONE);
		tvHeadCenter.setVisibility(View.VISIBLE);
	}
	
	public void showUnavailable() {
		if(ivConnectLoading != null && ivConnectLoading.getAnimation() != null)
			ivConnectLoading.getAnimation().cancel();
		tvUnavaliable.setText("未连接");
		ivConnectLoading.setVisibility(View.GONE);
		ivConnectLoading.setImageBitmap(null);
		lytConnecting.setVisibility(View.VISIBLE);
		tvHeadCenter.setVisibility(View.GONE);
	}

	private void initView(Context context) {

		includeHead = View.inflate(context, R.layout.layout_headview, null);
		addView(includeHead,new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));
		btnBack = (ImageButton) includeHead.findViewById(R.id.btn_back);
		tvHeadCenter = (TextView) includeHead.findViewById(R.id.tv_head_center);
		btnHeadAddedRight = (ImageView) includeHead.findViewById(R.id.btn_added_right);
		btnHeadRight = (Button) includeHead.findViewById(R.id.btn_head_right);
		ibtnHeadRight = (ImageButton) includeHead.findViewById(R.id.ibtn_head_right);
		
		lytConnecting = includeHead.findViewById(R.id.lyt_connecting);
		ivConnectLoading = (ImageView)includeHead.findViewById(R.id.iv_connect_loading);
		tvUnavaliable = (TextView)includeHead.findViewById(R.id.tv_connect_unavaliable);
		
		btnBack.setOnClickListener(this);
		tvHeadCenter.setOnClickListener(this);
		btnHeadRight.setOnClickListener(this);
		ibtnHeadRight.setOnClickListener(this);
		
		includeHead.setOnTouchListener(doubleClickTouch);
		tvHeadCenter.setOnTouchListener(doubleClickTouch);
		
		tvGroupLeft = (Button) includeHead.findViewById((R.id.group_left));
		tvGroupRight = (Button) includeHead.findViewById((R.id.group_right));
		
		tvGroupLeft.setOnClickListener(this);
		tvGroupRight.setOnClickListener(this);
	}
	
	/**
	 * 模拟实现双击事件
	 */
	public OnTouchListener doubleClickTouch = new OnTouchListener() {
		
		@Override
		public boolean onTouch(View arg0, MotionEvent arg1) {
			long tick = System.currentTimeMillis();
			Object tagTick = arg0.getTag();
			long lastTick = 0;
			if(tagTick != null && tagTick instanceof Long)
			{
				lastTick = (Long)tagTick;
			}
			if(tick - lastTick < 300)
			{
				//double clicked
				if(onDoubleClickListener != null)
				{
					onDoubleClickListener.OnDoubleClick(arg0);
				}
				arg0.setTag(0);
			}
			else
				arg0.setTag(tick);
			return false;
		}
	};

	/**
	 * 头部点击监听接口
	 * 
	 * @author yangzhao
	 * 
	 */
	public interface OnHeadClickListener {
		/**
		 * 中间标题点击事件
		 * @param v
		 */
		void OnCenterTVClick(View v);

		/**
		 * 左边按钮点击事件
		 * @param v
		 */
		void OnLeftBtnClick(View v);

		/**
		 * 右边按钮点击事件
		 * @param v
		 */
		void OnRightBtnClick(View v);

		/**
		 * 右边imageBtn点击事件
		 * @param v
		 */
		void OnRightIBtnClick(View v);
	}
	
	/**
	 * @author wangchong
	 * 头部被双击的事件的调用
	 */
	public interface OnHeadDoubleClickListener {
		void OnDoubleClick(View v);
	}

	public void setOnHeadClick(OnHeadClickListener onClickListener) {
		this.onClickListener = onClickListener;
	}
	
	public void setOnDoubleClickListener(
			OnHeadDoubleClickListener onDoubleClickListener) {
		this.onDoubleClickListener = onDoubleClickListener;
	}

	@Override
	public void onClick(View v) {
		if (onClickListener == null) {
			return;
		}
		switch (v.getId()) {
		case R.id.btn_back:
			OnLeftBtnClick(v);
			break;
		case R.id.tv_head_center:
			OnCenterTVClick(v);
			break;
		case R.id.btn_head_right:
			OnRightBtnClick(v);
			break;
		case R.id.ibtn_head_right:
			OnRightIBtnClick(v);
			break;
		case R.id.group_left:
			OnCenterTVClick(v);
			break;
		case R.id.group_right:
			OnCenterTVClick(v);
			break;
		default:
			break;
		}
	}

	/**
	 * 初始化头部背景，文字
	 * 
	 * @author yangzhao
	 * 
	 */
	public interface OnHeadInitListener {
		/**
		 * 初始化中间按钮资源
		 * @param cTv
		 */
		void initCenterTv(TextView cTv);
		/**
		 * 初始化左边按钮资源
		 * @param lBtn
		 */
		void initLeftBtn(ImageButton lBtn);
		/**
		 * 初始化右边按钮资源
		 * @param rBtn
		 */
		void initRightBtn(Button rBtn);
		/**
		 * 初始话化右边ImageBtn资源
		 * @param ibtn
		 */
		void initRightIBtn(ImageButton ibtn);
	}
	
	public void OnLeftBtnClick(View v) {
		if (onClickListener == null) {
			return;
		}
		onClickListener.OnLeftBtnClick(v);
	}
	
	public void OnCenterTVClick(View v) {
		if (onClickListener == null) {
			return;
		}
		onClickListener.OnCenterTVClick(v);
	}
	
	public void OnRightBtnClick(View v) {
		if (onClickListener == null) {
			return;
		}
		onClickListener.OnRightBtnClick(v);
	}
	
	public void OnRightIBtnClick(View v) {
		if (onClickListener == null) {
			return;
		}
		onClickListener.OnRightIBtnClick(v);
	}
	/**
	 * 显示听筒模式
	 * @param resId
	 */
	public void showEarpieceView(int resId){
		if(resId!=0){
		btnHeadAddedRight.setVisibility(View.VISIBLE);
		btnHeadAddedRight.setImageResource(resId);
		}
	}
	/**
	 * 隐藏听筒图标
	 */
	public void hideEarpieceView(){
		btnHeadAddedRight.setVisibility(View.GONE);
	}
	
	/**
	 * 清除headview 的相关引用
	 */
	public void clearHead()
	{
		onClickListener = null;
	}

	public View getIncludeHead() {
		return includeHead;
	}
}
package com.szcomtop.meal.views;

import android.content.Context;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.view.MotionEvent;

/**
 * Created by wuming on 16/3/25.
 */
public class MyViewPager extends ViewPager {

    public MyViewPager(Context context, AttributeSet attrs) {
        super(context, attrs);
    }


    public MyViewPager(Context context) {
        super(context);
    }

    @Override
    public boolean onTouchEvent(MotionEvent ev) {
        return false;

    }

    @Override
    public boolean onInterceptTouchEvent(MotionEvent arg0) {

            return false;


    }
}
package com.szcomtop.meal.views;


import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.szcomtop.meal.R;

/**
 * 个人中心item view
 * @author Cloudly
 */

public class OptionItemView extends LinearLayout{


	private TextView leftTv;
	private TextView rightTv;
	private TextView centerTv;
	private TextView xingTv;

	public OptionItemView(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
	}
	
	public OptionItemView(Context context, AttributeSet attrs) {
		super(context, attrs);
		
		
		initView(context, attrs);
		
	}
	
	
	/**
	 * 初始化界面
	 * @param context
	 * @param attrs
	 */
	private void initView(Context context, AttributeSet attrs){
		
		View view = LayoutInflater.from(context).inflate(R.layout.option_item, this, true);
		leftTv = (TextView)view.findViewById(R.id.option_item_tv_left);
		rightTv = (TextView)view.findViewById(R.id.option_item_tv_right);
		centerTv = (TextView)view.findViewById(R.id.option_item_tv_center);
		xingTv = (TextView)view.findViewById(R.id.option_item_tv_must_need);
		View arrow = findViewById(R.id.option_item_arrow);
		View rightArea = view.findViewById(R.id.option_item_right_area);


		TypedArray typeArray = context.obtainStyledAttributes(attrs, R.styleable.OptionItemView);
		CharSequence leftText = typeArray.getText(R.styleable.OptionItemView_textLeft);
		CharSequence rightText = typeArray.getText(R.styleable.OptionItemView_textRight);
		CharSequence centerText = typeArray.getText(R.styleable.OptionItemView_textCenter);
		boolean showCenterTv = typeArray.getBoolean(R.styleable.OptionItemView_showCenterTv, true);
		boolean showRight = typeArray.getBoolean(R.styleable.OptionItemView_showRight, true);
		boolean showXing = typeArray.getBoolean(R.styleable.OptionItemView_showXing, true);
		boolean showArrow = typeArray.getBoolean(R.styleable.OptionItemView_showArrow, true);


		if (leftText != null){

			leftTv.setText(leftText);
		}
		if (rightText != null){
			rightTv.setText(rightText);
		}

		if (centerText != null){
			centerTv.setText(centerText);
		}

		centerTv.setVisibility(showCenterTv == true ? VISIBLE :INVISIBLE);
		rightArea.setVisibility(showRight == true ? VISIBLE :INVISIBLE);

		xingTv.setVisibility(showXing == true ? VISIBLE :INVISIBLE);
		arrow.setVisibility(showArrow == true ? VISIBLE :INVISIBLE);

		typeArray.recycle();
		
	}
	


	public void setLeftText(String leftText){
		if (leftText != null){
			leftTv.setText(leftText);
		}
	}

	public void setRightText(String rightText){
		if (rightText != null){
			rightTv.setText(rightText);
		}
	}


	public  String getRightText(){
		return  rightTv.getText().toString();
	}


}
package com.szcomtop.meal.views;

import android.animation.Animator;
import android.animation.ObjectAnimator;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;

import com.szcomtop.meal.R;
import com.szcomtop.meal.common.MyAnimatorListenerAdapter;


public class SearchBar extends FrameLayout  {

	private ImageView searchImg;
	private EditText searchEdt;
	private TextView searchTv;
	private View searchArea;

	public SearchBar(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		init();
	}

	public SearchBar(Context context, AttributeSet attrs) {
		super(context, attrs);
		init();
	}

	public SearchBar(Context context) {
		super(context);
		init();
	}
	public void reset(){
		this.removeAllViews();
		init();
//		searchEdt.setText("");
		Log.i("wuming","reset");
	}

	
	
	public void init(){
	FrameLayout inflate = (FrameLayout) View.inflate(getContext(), R.layout.search_bar, null);
	this.addView(inflate);
	
	searchImg = (ImageView) inflate.findViewById(R.id.search_bar_img);
		searchArea = inflate.findViewById(R.id.search_bar_area);
	searchEdt = (EditText) inflate.findViewById(R.id.edt_searchkey);
		searchTv = (TextView) findViewById(R.id.search_bar_tv);
	searchEdt.setOnFocusChangeListener(new OnFocusChangeListener() {
		
		@Override
		public void onFocusChange(View v, boolean hasFocus) {
			// TODO Auto-generated method stub
			if(hasFocus){
				if(searchImg.isShown()){
					startAnimate();
				}
			}
		}
	});
		
	}

	protected void startAnimate() {
		// TODO Auto-generated method stub
		ObjectAnimator  oa = ObjectAnimator.ofFloat(searchArea, "translationX", -searchArea.getLeft());
		oa.setDuration(300);
		oa.setInterpolator(new AccelerateDecelerateInterpolator());
		oa.addListener(new MyAnimatorListenerAdapter(){
			@Override
			public void onAnimationEnd(Animator animation) {
				
				searchEdt.setCompoundDrawablePadding((int) getResources().getDimension(R.dimen.padding_m));
				Drawable drawable = getResources().getDrawable(R.drawable.bg_search_edit);

				 drawable.setBounds(0, 0, getHeight()-searchEdt.getCompoundDrawablePadding(), getHeight()-searchEdt.getCompoundDrawablePadding());//必须设置图片大小，否则不显示
				searchEdt.setCompoundDrawables(drawable, null, null, null);
				searchImg.setVisibility(View.GONE);
				searchTv.setVisibility(View.GONE);
				SearchBar.this.setOnClickListener(null);
				
			}
		});
		oa.start();
	}
	
	
	public void addTextChangedListener(TextWatcher watcher){
		searchEdt.addTextChangedListener(watcher);
	}
	
	
	
	
	

}
package com.szcomtop.meal.views;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.content.Context;
import android.graphics.Color;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.FrameLayout;
import android.widget.RelativeLayout;

import com.szcomtop.meal.R;
import com.szcomtop.meal.common.MyAnimatorListenerAdapter;
import com.szcomtop.meal.utils.ViewUtils;

/**
 * Created by wuming on 16/3/25.
 */
public class SlidingFromTopView extends RelativeLayout {
    private View mView;
    private View inflate;

    public SlidingFromTopView(Context context) {
        super(context);
        initView();
    }



    public SlidingFromTopView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView();

    }

    public SlidingFromTopView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initView();

    }


    private void initView() {
      inflate = View.inflate(getContext(), R.layout.test, null);
        this.addView(inflate);
    }


    public void setView(View view){
        mView = view ;
        this.addView(view,LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);

    }

    public  void setFragment(FragmentTransaction t , Fragment fragment){


        t.add(R.id.test,fragment);
        t.commit();
        mView = inflate ;
    }


    public void setView(View view,LayoutParams params){
        mView = view ;
        this.addView(view,params);

    }


    public void startShowAnimate(){
        if (mView == null){
            return;
        }
        mView.measure(0,0);
        final int height = -mView.getMeasuredHeight();
        ValueAnimator va = ValueAnimator.ofFloat(height,0);
        va.setDuration(300);
        va.setInterpolator( new AccelerateDecelerateInterpolator());
        va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                Float animatedValue = (Float) valueAnimator.getAnimatedValue();
                mView.setTranslationY(animatedValue);



                SlidingFromTopView.this.setBackgroundColor(Color.argb((int) ((0.6f- Math.abs(animatedValue/height)*0.6f)*255),0,0,0));
            }
        });
        va.start();
    }

    public void startDismissAnimate(){

        if (mView == null){
            return;
        }
        mView.measure(0,0);
        final int height = -mView.getMeasuredHeight();
        ValueAnimator va = ValueAnimator.ofFloat(0,height);
        va.setDuration(300);
        va.setInterpolator(new AccelerateDecelerateInterpolator());
        va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                Float animatedValue = (Float) valueAnimator.getAnimatedValue();
                mView.setTranslationY(animatedValue);
                SlidingFromTopView.this.setBackgroundColor(Color.argb((int) ((0.6f-Math.abs(animatedValue/height)*0.6f)*255),0,0,0));


            }
        });
        va.addListener(new MyAnimatorListenerAdapter(){
            @Override
            public void onAnimationEnd(Animator animation) {
                SlidingFromTopView.this.setVisibility(GONE);
            }
        });
        va.start();
    }

     public void show(){
         setVisibility(VISIBLE);
         startShowAnimate();
     }

    public void dismiss(){
        startDismissAnimate();
    }


    @Override
    public boolean onTouchEvent(MotionEvent event) {

        if (!ViewUtils.isTouchInView(event,mView)){
            dismiss();
        }

        return true;
    }
}
package com.szcomtop.meal.views;

import android.content.Context;
import android.graphics.Color;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.szcomtop.meal.R;
import com.szcomtop.meal.model.CarteenStastatic1;

import java.util.List;

/**
 * Created by wuming on 16/3/25.
 */
public class StatisticCard extends RelativeLayout {

    private LinearLayout mStatisticCardLl;
    private TextView mStatisticCardTitleLeftTv;
    private TextView mStatisticCardTitleRightTv;

    private void assignViews() {
        View inflate = View.inflate(getContext(), R.layout.statistic_card,null);
        this.addView(inflate,LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
        mStatisticCardLl = (LinearLayout) inflate.findViewById(R.id.statistic_card_ll);
        mStatisticCardTitleLeftTv = (TextView) inflate.findViewById(R.id.statistic_card_title_left_tv);
        mStatisticCardTitleRightTv = (TextView) inflate.findViewById(R.id.statistic_card_title_right_tv);
    }


    public StatisticCard(Context context) {
        super(context);
        initView();
    }

    public StatisticCard(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView();

    }

    public StatisticCard(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initView();
    }

    private void initView() {

        assignViews();

    }

    public  void setTitleLeftText(String text){
        mStatisticCardTitleLeftTv.setText(text);
    }


    public void setData(String[] leftColumn , int[] rightColumn){
        if (leftColumn == null || rightColumn == null){
            return;
        }
        for (int i = 0 ;i<leftColumn.length ;i++){
            View item = View.inflate(getContext(), R.layout.statistic_card_item, null);
            View letfTv = item.findViewById(R.id.statistic_card_item_left_tv);
            View rightTv = item.findViewById(R.id.statistic_card_item_right_tv);
            mStatisticCardLl.addView(item);

        }

        if (leftColumn.length != 0){
            View item = View.inflate(getContext(), R.layout.statistic_card_item, null);
            TextView leftTv = (TextView) item.findViewById(R.id.statistic_card_item_left_tv);
            TextView rightTv = (TextView) item.findViewById(R.id.statistic_card_item_right_tv);
            leftTv.setText("汇总");
            leftTv.setTextColor(Color.parseColor("#2b9af7"));
            rightTv.setText("120");
            rightTv.setTextColor(Color.parseColor("#2b9af7"));
            mStatisticCardLl.addView(item);
        }
    }


    public void setData(List<CarteenStastatic1> source,boolean isSource) {


        mStatisticCardLl.removeAllViews();



        if (source == null ){
            return;
        }
        int sum = 0 ;

        for (int i = 0 ;i<source.size() ;i++){
            View item = View.inflate(getContext(), R.layout.statistic_card_item, null);
            TextView letfTv = (TextView) item.findViewById(R.id.statistic_card_item_left_tv);
            TextView rightTv = (TextView) item.findViewById(R.id.statistic_card_item_right_tv);
            letfTv.setText(source.get(i).getDineRoomName());
            if (isSource){

                rightTv.setText(source.get(i).getAddNum()+"");
                sum+= source.get(i).getAddNum() ;
            }else {
                rightTv.setText(source.get(i).getReduceNum()+"");
                sum+= source.get(i).getReduceNum() ;
            }

            mStatisticCardLl.addView(item);

        }

        if (source.size() != 0){
            View item = View.inflate(getContext(), R.layout.statistic_card_item, null);
            TextView leftTv = (TextView) item.findViewById(R.id.statistic_card_item_left_tv);
            TextView rightTv = (TextView) item.findViewById(R.id.statistic_card_item_right_tv);
            leftTv.setText("汇总");
            leftTv.setTextColor(Color.parseColor("#2b9af7"));
            rightTv.setText(sum+"");
            rightTv.setTextColor(Color.parseColor("#2b9af7"));
            mStatisticCardLl.addView(item);
        }

    }
}
package com.szcomtop.meal.views;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.RadialGradient;
import android.graphics.RectF;
import android.graphics.Shader;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.AccelerateInterpolator;

/**
 * For details, please see <b>http://blog.csdn.net/bfbx5173/article/details/45191147<b>
 *
 * @author else
 */
public class SwitchView extends View {

	private final Paint paint = new Paint();
	private final Path sPath = new Path();
	private final Path bPath = new Path();
	private final RectF bRectF = new RectF();
	private float sAnim, bAnim;
	private RadialGradient shadowGradient;
	private final AccelerateInterpolator aInterpolator = new AccelerateInterpolator(2);

	/**
	 * state switch on
	 */
	public static final int STATE_SWITCH_ON = 4;
	/**
	 * state prepare to off
	 */
	public static final int STATE_SWITCH_ON2 = 3;
	/**
	 * state prepare to on
	 */
	public static final int STATE_SWITCH_OFF2 = 2;
	/**
	 * state prepare to off
	 */
	public static final int STATE_SWITCH_OFF = 1;
	/**
	 * current state
	 */
	private int state = STATE_SWITCH_OFF;
	/**
	 * last state
	 */
	private int lastState = state;

	private boolean isOpened = false;

	private int mWidth, mHeight;
	private float sWidth, sHeight;
	private float sLeft, sTop, sRight, sBottom;
	private float sCenterX, sCenterY;
	private float sScale;

	private float bOffset;
	private float bRadius, bStrokeWidth;
	private float bWidth;
	private float bLeft, bTop, bRight, bBottom;
	private float bOnLeftX, bOn2LeftX, bOff2LeftX, bOffLeftX;

	private float shadowHeight;

	public SwitchView(Context context) {
		this(context, null);
	}

	public SwitchView(Context context, AttributeSet attrs) {
		super(context, attrs);
		setLayerType(LAYER_TYPE_SOFTWARE, null);
	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		int widthSize = MeasureSpec.getSize(widthMeasureSpec);
		int heightSize = (int) (widthSize * 0.65f);
		setMeasuredDimension(widthSize, heightSize);
	}

	@Override
	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		super.onSizeChanged(w, h, oldw, oldh);
		mWidth = w;
		mHeight = h;

		sLeft = sTop = 0;
		sRight = mWidth;
		sBottom = mHeight * 0.91f;
		sWidth = sRight - sLeft;
		sHeight = sBottom - sTop;
		sCenterX = (sRight + sLeft) / 2;
		sCenterY = (sBottom + sTop) / 2;

		shadowHeight = mHeight - sBottom;

		bLeft = bTop = 0;
		bRight = bBottom = sBottom;
		bWidth = bRight - bLeft;
		final float halfHeightOfS = (sBottom - sTop) / 2;
		bRadius = halfHeightOfS * 0.95f;
		bOffset = bRadius * 0.2f;
		bStrokeWidth = (halfHeightOfS - bRadius) * 2;

		bOnLeftX = sWidth - bWidth;
		bOn2LeftX = bOnLeftX - bOffset;
		bOffLeftX = 0;
		bOff2LeftX = 0;

		sScale = 1 - bStrokeWidth / sHeight;

		RectF sRectF = new RectF(sLeft, sTop, sBottom, sBottom);
		sPath.arcTo(sRectF, 90, 180);
		sRectF.left = sRight - sBottom;
		sRectF.right = sRight;
		sPath.arcTo(sRectF, 270, 180);
		sPath.close();

		bRectF.left = bLeft;
		bRectF.right = bRight;
		bRectF.top = bTop + bStrokeWidth / 2;
		bRectF.bottom = bBottom - bStrokeWidth / 2;

		shadowGradient = new RadialGradient(bWidth / 2, bWidth / 2, bWidth / 2, 0xff000000, 0x00000000, Shader.TileMode.CLAMP);
	}

	private void calcBPath(float percent) {
		bPath.reset();
		bRectF.left = bLeft + bStrokeWidth / 2;
		bRectF.right = bRight - bStrokeWidth / 2;
		bPath.arcTo(bRectF, 90, 180);
		bRectF.left = bLeft + percent * bOffset + bStrokeWidth / 2;
		bRectF.right = bRight + percent * bOffset - bStrokeWidth / 2;
		bPath.arcTo(bRectF, 270, 180);
		bPath.close();
	}

	private float calcBTranslate(float percent) {
		float result = 0;
		int wich = state - lastState;
		switch (wich) {
			case 1:
				// off -> off2
				if (state == STATE_SWITCH_OFF2) {
					result = bOff2LeftX - (bOff2LeftX - bOffLeftX) * percent;
				}
				// on2 -> on
				else if (state == STATE_SWITCH_ON) {
					result = bOnLeftX - (bOnLeftX - bOn2LeftX) * percent;
				}
				break;
			case 2:
				// off2 -> on
				if (state == STATE_SWITCH_ON) {
					result = bOnLeftX - (bOnLeftX - bOff2LeftX) * percent;
				}
				// off -> on2
				else if (state == STATE_SWITCH_ON) {
					result = bOn2LeftX - (bOn2LeftX - bOffLeftX) * percent;
				}
				break;
			case 3: // off -> on
				result = bOnLeftX - (bOnLeftX - bOffLeftX) * percent;
				break;
			case -1:
				// on -> on2
				if (state == STATE_SWITCH_ON2) {
					result = bOn2LeftX + (bOnLeftX - bOn2LeftX) * percent;
				}
				// off2 -> off
				else if (state == STATE_SWITCH_OFF) {
					result = bOffLeftX + (bOff2LeftX - bOffLeftX) * percent;
				}
				break;
			case -2:
				// on2 -> off
				if (state == STATE_SWITCH_OFF) {
					result = bOffLeftX + (bOn2LeftX - bOffLeftX) * percent;
				}
				// on -> off2
				else if (state == STATE_SWITCH_OFF2) {
					result = bOff2LeftX + (bOnLeftX - bOff2LeftX) * percent;
				}
				break;
			case -3: // on -> off
				result = bOffLeftX + (bOnLeftX - bOffLeftX) * percent;
				break;
		}

		return result - bOffLeftX;
	}

	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		paint.setAntiAlias(true);
		final boolean isOn = (state == STATE_SWITCH_ON || state == STATE_SWITCH_ON2);
		// draw background
		paint.setStyle(Style.FILL);
		paint.setColor(isOn ? 0xff4bd763 : 0xffe3e3e3);
		canvas.drawPath(sPath, paint);

		sAnim = sAnim - 0.1f > 0 ? sAnim - 0.1f : 0;
		bAnim = bAnim - 0.1f > 0 ? bAnim - 0.1f : 0;

		final float dsAnim = aInterpolator.getInterpolation(sAnim);
		final float dbAnim = aInterpolator.getInterpolation(bAnim);
		// draw background animation
		final float scale = sScale * (isOn ? dsAnim : 1 - dsAnim);
		final float scaleOffset = (bOnLeftX + bRadius - sCenterX) * (isOn ? 1 - dsAnim : dsAnim);
		canvas.save();
		canvas.scale(scale, scale, sCenterX + scaleOffset, sCenterY);
		paint.setColor(0xffffffff);
		canvas.drawPath(sPath, paint);
		canvas.restore();
		// draw center bar
		canvas.save();
		canvas.translate(calcBTranslate(dbAnim), shadowHeight);
		final boolean isState2 = (state == STATE_SWITCH_ON2 || state == STATE_SWITCH_OFF2);
		calcBPath(isState2 ? 1 - dbAnim : dbAnim);
		// draw shadow
		paint.setStyle(Style.FILL);
		paint.setColor(0xff333333);
		paint.setShader(shadowGradient);
		canvas.drawPath(bPath, paint);
		paint.setShader(null);
		canvas.translate(0, -shadowHeight);

		canvas.scale(0.98f, 0.98f, bWidth / 2, bWidth / 2);
		paint.setStyle(Style.FILL);
		paint.setColor(0xffffffff);
		canvas.drawPath(bPath, paint);

		paint.setStyle(Style.STROKE);
		paint.setStrokeWidth(bStrokeWidth * 0.5f);

		paint.setColor(isOn ? 0xff4ada60 : 0xffbfbfbf);
		canvas.drawPath(bPath, paint);

		canvas.restore();

		paint.reset();
		if (sAnim > 0 || bAnim > 0) invalidate();
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		if ((state == STATE_SWITCH_ON || state == STATE_SWITCH_OFF) && (sAnim * bAnim == 0)) {
			switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					return true;
				case MotionEvent.ACTION_UP:
					lastState = state;
					if (state == STATE_SWITCH_OFF) {
						refreshState(STATE_SWITCH_OFF2);
					} else if (state == STATE_SWITCH_ON) {
						refreshState(STATE_SWITCH_ON2);
					}
					bAnim = 1;
					invalidate();

					if (state == STATE_SWITCH_OFF2) {
						listener.toggleToOn(this);
					} else if (state == STATE_SWITCH_ON2) {
						listener.toggleToOff(this);
					}
					break;
			}
		}
		return super.onTouchEvent(event);
	}

	private void refreshState(int newState) {
		if (!isOpened && newState == STATE_SWITCH_ON) {
			isOpened = true;
		} else if (isOpened && newState == STATE_SWITCH_OFF) {
			isOpened = false;
		}
		lastState = state;
		state = newState;
		postInvalidate();
	}

	/**
	 * @return the state of switch view
	 */
	public boolean isOpened() {
		return isOpened;
	}

	/**
	 * if set true , the state change to on;
	 * if set false, the state change to off
	 *
	 * @param isOpened
	 */
	public void setOpened(boolean isOpened) {
		refreshState(isOpened ? STATE_SWITCH_ON : STATE_SWITCH_OFF);
	}

	/**
	 * if set true , the state change to on;
	 * if set false, the state change to off
	 * <br><b>change state with animation</b>
	 *
	 * @param isOpened
	 */
	public void toggleSwitch(final boolean isOpened) {
		this.isOpened = isOpened;
		postDelayed(new Runnable() {
			@Override
			public void run() {
				toggleSwitch(isOpened ? STATE_SWITCH_ON : STATE_SWITCH_OFF);
			}
		}, 300);
	}

	private synchronized void toggleSwitch(int wich) {
		if (wich == STATE_SWITCH_ON || wich == STATE_SWITCH_OFF) {
			if ((wich == STATE_SWITCH_ON && (lastState == STATE_SWITCH_OFF || lastState == STATE_SWITCH_OFF2))
					|| (wich == STATE_SWITCH_OFF && (lastState == STATE_SWITCH_ON || lastState == STATE_SWITCH_ON2))) {
				sAnim = 1;
			}
			bAnim = 1;
			refreshState(wich);
		}
	}

	public interface OnStateChangedListener {
		void toggleToOn(View view);

		void toggleToOff(View view);
	}

	private OnStateChangedListener listener = new OnStateChangedListener() {
		@Override
		public void toggleToOn(View view) {
			toggleSwitch(STATE_SWITCH_ON);
		}

		@Override
		public void toggleToOff(View view) {
			toggleSwitch(STATE_SWITCH_OFF);
		}
	};

	public void setOnStateChangedListener(OnStateChangedListener listener) {
		if (listener == null) throw new IllegalArgumentException("empty listener");
		this.listener = listener;
	}

	@Override
	public Parcelable onSaveInstanceState() {
		Parcelable superState = super.onSaveInstanceState();
		SavedState ss = new SavedState(superState);
		ss.isOpened = isOpened;
		return ss;
	}

	@Override
	public void onRestoreInstanceState(Parcelable state) {
		SavedState ss = (SavedState) state;
		super.onRestoreInstanceState(ss.getSuperState());
		this.isOpened = ss.isOpened;
		this.state = this.isOpened ? STATE_SWITCH_ON : STATE_SWITCH_OFF;
	}

	static final class SavedState extends BaseSavedState {
		private boolean isOpened;

		SavedState(Parcelable superState) {
			super(superState);
		}

		private SavedState(Parcel in) {
			super(in);
			isOpened = 1 == in.readInt();
		}

		@Override
		public void writeToParcel(Parcel out, int flags) {
			super.writeToParcel(out, flags);
			out.writeInt(isOpened ? 1 : 0);
		}
	}
}
package com.szcomtop.meal.views.wheelView;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;

/**
 * Created by wuming on 16/3/30.
 */
public class FrameView extends View {

    private float firstLineY;
    private float secondLineY;

    public FrameView(Context context) {
        super(context);
    }

    public FrameView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public FrameView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }


    public void set(float firstLineY ,float secondLineY){
        this.firstLineY = firstLineY ;
        this.secondLineY = secondLineY ;
        //requestLayout();
        invalidate();
    }


    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        heightMeasureSpec = MeasureSpec.makeMeasureSpec((int) (secondLineY - firstLineY)+300,MeasureSpec.EXACTLY);
        super.onMeasure(widthMeasureSpec,heightMeasureSpec);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        Paint paintIndicator = new Paint(Paint.ANTI_ALIAS_FLAG);
        paintIndicator.setColor(Color.BLACK);
        paintIndicator.setStyle(Paint.Style.STROKE);
        paintIndicator.setStrokeWidth(2.0f);

        Path path = new Path();
        path.moveTo(0,firstLineY);
        path.lineTo(getMeasuredWidth(),firstLineY);
        path.lineTo(getMeasuredWidth(),secondLineY);
        path.lineTo(0,secondLineY);
        path.close();
        canvas.drawPath(path , paintIndicator);

    }
}
// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.szcomtop.meal.views.wheelView;

import java.util.TimerTask;

// Referenced classes of package com.qingchifan.view:
//            LoopView

final class InertiaTimerTask extends TimerTask {

    float a;
    final float velocityY;
    final LoopView loopView;

    InertiaTimerTask(LoopView loopview, float velocityY) {
        super();
        loopView = loopview;
        this.velocityY = velocityY;
        a = Integer.MAX_VALUE;
    }

    @Override
    public final void run() {
        if (a == Integer.MAX_VALUE) {
            if (Math.abs(velocityY) > 2000F) {
                if (velocityY > 0.0F) {
                    a = 2000F;
                } else {
                    a = -2000F;
                }
            } else {
                a = velocityY;
            }
        }
        if (Math.abs(a) >= 0.0F && Math.abs(a) <= 20F) {
            loopView.cancelFuture();
            loopView.handler.sendEmptyMessage(MessageHandler.WHAT_SMOOTH_SCROLL);
            return;
        }
        int i = (int) ((a * 10F) / 1000F);
        LoopView loopview = loopView;
        loopview.totalScrollY = loopview.totalScrollY - i;
        if (!loopView.isLoop) {
            float itemHeight = loopView.lineSpacingMultiplier * loopView.maxTextHeight;
            if (loopView.totalScrollY <= (int) ((float) (-loopView.initPosition) * itemHeight)) {
                a = 40F;
                loopView.totalScrollY = (int) ((float) (-loopView.initPosition) * itemHeight);
            } else if (loopView.totalScrollY >= (int) ((float) (loopView.items.size() - 1 - loopView.initPosition) * itemHeight)) {
                loopView.totalScrollY = (int) ((float) (loopView.items.size() - 1 - loopView.initPosition) * itemHeight);
                a = -40F;
            }
        }
        if (a < 0.0F) {
            a = a + 20F;
        } else {
            a = a - 20F;
        }
        loopView.handler.sendEmptyMessage(MessageHandler.WHAT_INVALIDATE_LOOP_VIEW);
    }
}
package com.szcomtop.meal.views.wheelView;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.os.Handler;
import android.util.AttributeSet;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;

import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

/**
 * Created by Weidongjian on 2015/8/18.
 */
public class LoopView extends View {

    private float scaleX = 1.05F;

    public enum ACTION {
        // 点击，滑翔(滑到尽头)，拖拽事件
        CLICK, FLING, DAGGLE
    }
    Context context;

    Handler handler;
    private GestureDetector gestureDetector;
    OnItemSelectedListener onItemSelectedListener;

    // Timer mTimer;
    ScheduledExecutorService mExecutor = Executors.newSingleThreadScheduledExecutor();
    private ScheduledFuture<?> mFuture;

    Paint paintOuterText;
    Paint paintCenterText;
    Paint paintIndicator;

    List<String> items;

    int textSize;
    int maxTextWidth;
    int maxTextHeight;

    int colorGray;
    int colorBlack;
    int colorLightGray;

    // 条目间距倍数
    float lineSpacingMultiplier;
    boolean isLoop;

    // 第一条线Y坐标值
    int firstLineY;
    int secondLineY;

    public int getFirstLineY() {
        return firstLineY;
    }

    public int getSecondLineY() {
        return secondLineY;
    }

    int totalScrollY;
    int initPosition;
    private int selectedItem;
    int preCurrentIndex;
    int change;

    // 显示几个条目
    int itemsVisible;

    int measuredHeight;
    int measuredWidth;
    int paddingLeft = 0;
    int paddingRight = 0;

    // 半圆周长
    int halfCircumference;
    // 半径
    int radius;

    private int mOffset = 0;
    private float previousY;
    long startTime = 0;

    private Rect tempRect = new Rect();

    public LoopView(Context context) {
        super(context);
        initLoopView(context);
    }

    public LoopView(Context context, AttributeSet attributeset) {
        super(context, attributeset);
        initLoopView(context);
    }

    public LoopView(Context context, AttributeSet attributeset, int defStyleAttr) {
        super(context, attributeset, defStyleAttr);
        initLoopView(context);
    }

    private void initLoopView(Context context) {
        this.context = context;
        handler = new MessageHandler(this);
        gestureDetector = new GestureDetector(context, new LoopViewGestureListener(this));
        gestureDetector.setIsLongpressEnabled(false);

        lineSpacingMultiplier = 2.0F;
        isLoop = true;
        itemsVisible = 9;
        textSize = 0;
        colorGray = 0xffafafaf;
        colorBlack = 0xff313131;
        colorLightGray = 0xffc5c5c5;

        totalScrollY = 0;
        initPosition = -1;

        initPaints();

        setTextSize(16F);
    }

    private void initPaints() {
        paintOuterText = new Paint();
        paintOuterText.setColor(colorGray);
        paintOuterText.setAntiAlias(true);
        paintOuterText.setTypeface(Typeface.MONOSPACE);
        paintOuterText.setTextSize(textSize);

        paintCenterText = new Paint();
        paintCenterText.setColor(colorBlack);
        paintCenterText.setAntiAlias(true);
        paintCenterText.setTextScaleX(scaleX);
        paintCenterText.setTypeface(Typeface.MONOSPACE);
        paintCenterText.setTextSize(textSize);

        paintIndicator = new Paint();
        paintIndicator.setColor(colorLightGray);
        paintIndicator.setAntiAlias(true);

        if (android.os.Build.VERSION.SDK_INT >= 11) {
            setLayerType(LAYER_TYPE_SOFTWARE, null);
        }
    }

    private void remeasure() {
        if (items == null) {
            return;
        }

        measureTextWidthHeight();

        halfCircumference = (int) (maxTextHeight * lineSpacingMultiplier * (itemsVisible - 1));
        measuredHeight = (int) ((halfCircumference * 2) / Math.PI);
        radius = (int) (halfCircumference / Math.PI);
        measuredWidth = maxTextWidth + paddingLeft + paddingRight;
        firstLineY = (int) ((measuredHeight - lineSpacingMultiplier * maxTextHeight) / 2.0F);
        secondLineY = (int) ((measuredHeight + lineSpacingMultiplier * maxTextHeight) / 2.0F);
        if (initPosition == -1) {
            if (isLoop) {
                initPosition = (items.size() + 1) / 2;
            } else {
                initPosition = 0;
            }
        }

        preCurrentIndex = initPosition;
    }

    private void measureTextWidthHeight() {
        for (int i = 0; i < items.size(); i++) {
            String s1 = items.get(i);
            paintCenterText.getTextBounds(s1, 0, s1.length(), tempRect);
            int textWidth = tempRect.width()+2;
            if (textWidth > maxTextWidth) {
                maxTextWidth = (int) (textWidth * scaleX+0.5f);
            }
            paintCenterText.getTextBounds("\u661F\u671F", 0, 2, tempRect); // 星期
            int textHeight = tempRect.height();
            if (textHeight > maxTextHeight) {
                maxTextHeight = textHeight;
            }
        }

    }

    void smoothScroll(ACTION action) {
        cancelFuture();
        if (action== ACTION.FLING||action== ACTION.DAGGLE) {
            float itemHeight = lineSpacingMultiplier * maxTextHeight;
            mOffset = (int) ((totalScrollY%itemHeight + itemHeight) % itemHeight);
            if ((float) mOffset > itemHeight / 2.0F) {
                mOffset = (int) (itemHeight - (float) mOffset);
            } else {
                mOffset = -mOffset;
            }
        }
        mFuture = mExecutor.scheduleWithFixedDelay(new SmoothScrollTimerTask(this, mOffset), 0, 10, TimeUnit.MILLISECONDS);
    }

//    void smoothScroll() {
//        int offset = (int) (totalScrollY % (lineSpacingMultiplier * maxTextHeight));
//        cancelFuture();
//        mFuture = mExecutor.scheduleWithFixedDelay(new SmoothScrollTimerTask(this, offset), 0, 10, TimeUnit.MILLISECONDS);
//    }

    protected final void scrollBy(float velocityY) {
        cancelFuture();
        // 修改这个值可以改变滑行速度
        int velocityFling = 10;
        mFuture = mExecutor.scheduleWithFixedDelay(new InertiaTimerTask(this, velocityY), 0, velocityFling, TimeUnit.MILLISECONDS);
    }

    public void cancelFuture() {
        if (mFuture!=null&&!mFuture.isCancelled()) {
            mFuture.cancel(true);
            mFuture = null;
        }
    }

    public final void setNotLoop() {
        isLoop = false;
    }

    public final void setTextSize(float size) {
        if (size > 0.0F) {
            textSize = (int) (context.getResources().getDisplayMetrics().density * size);
            paintOuterText.setTextSize(textSize);
            paintCenterText.setTextSize(textSize);
        }
    }

    public final void setInitPosition(int initPosition) {
        if (initPosition<0) {
            this.initPosition = 0;
        } else {
            if (items!=null&&(items.size()-1)>initPosition) {
                this.initPosition = initPosition;
            }
        }
    }

    public final void setListener(OnItemSelectedListener OnItemSelectedListener) {
        onItemSelectedListener = OnItemSelectedListener;
    }

    public final void setItems(List<String> items) {
        this.items = items;
        remeasure();
        invalidate();
    }

    @Override
    public int getPaddingLeft() {
        return paddingLeft;
    }

    @Override
    public int getPaddingRight() {
        return paddingRight;
    }

    // 设置左右内边距
    public void setViewPadding(int left, int top, int right, int bottom) {
        paddingLeft = left;
        paddingRight = right;
    }

    public final int getSelectedItem() {
        return selectedItem;
    }
//
//    protected final void scrollBy(float velocityY) {
//        Timer timer = new Timer();
//        mTimer = timer;
//        timer.schedule(new InertiaTimerTask(this, velocityY, timer), 0L, 20L);
//    }

    protected final void onItemSelected() {
        if (onItemSelectedListener != null) {
            postDelayed(new OnItemSelectedRunnable(this), 200L);
        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        if (items == null) {
            return;
        }

        String as[] = new String[itemsVisible];
        change = (int) (totalScrollY / (lineSpacingMultiplier * maxTextHeight));
        preCurrentIndex = initPosition + change % items.size();

        if (!isLoop) {
            if (preCurrentIndex < 0) {
                preCurrentIndex = 0;
            }
            if (preCurrentIndex > items.size() - 1) {
                preCurrentIndex = items.size() - 1;
            }
        } else {
            if (preCurrentIndex < 0) {
                preCurrentIndex = items.size() + preCurrentIndex;
            }
            if (preCurrentIndex > items.size() - 1) {
                preCurrentIndex = preCurrentIndex - items.size();
            }
        }

        int j2 = (int) (totalScrollY % (lineSpacingMultiplier * maxTextHeight));
        // 设置as数组中每个元素的值
        int k1 = 0;
        while (k1 < itemsVisible) {
            int l1 = preCurrentIndex - (itemsVisible / 2 - k1);
            if (isLoop) {
                while (l1 < 0) {
                    l1 = l1 + items.size();
                }
                while (l1 > items.size() - 1) {
                    l1 = l1 - items.size();
                }
                as[k1] = items.get(l1);
            } else if (l1 < 0) {
                as[k1] = "";
            } else if (l1 > items.size() - 1) {
                as[k1] = "";
            } else {
                as[k1] = items.get(l1);
            }
            k1++;
        }
        canvas.drawLine(0.0F, firstLineY, measuredWidth, firstLineY, paintIndicator);
        canvas.drawLine(0.0F, secondLineY, measuredWidth, secondLineY, paintIndicator);

        int j1 = 0;
        while (j1 < itemsVisible) {
            canvas.save();
            // L(弧长)=α（弧度）* r(半径) （弧度制）
            // 求弧度--> (L * π ) / (π * r)   (弧长X派/半圆周长)
            float itemHeight = maxTextHeight * lineSpacingMultiplier;
            double radian = ((itemHeight * j1 - j2) * Math.PI) / halfCircumference;
            // 弧度转换成角度(把半圆以Y轴为轴心向右转90度，使其处于第一象限及第四象限
            float angle = (float) (90D - (radian / Math.PI) * 180D);
            if (angle >= 90F || angle <= -90F) {
                canvas.restore();
            } else {
                int translateY = (int) (radius - Math.cos(radian) * radius - (Math.sin(radian) * maxTextHeight) / 2D);
                canvas.translate(0.0F, translateY);
                canvas.scale(1.0F, (float) Math.sin(radian));
                if (translateY <= firstLineY && maxTextHeight + translateY >= firstLineY) {
                    // 条目经过第一条线
                    canvas.save();
                    canvas.clipRect(0, 0, measuredWidth, firstLineY - translateY);
                    canvas.drawText(as[j1], getTextX(as[j1], paintOuterText, tempRect), maxTextHeight, paintOuterText);
                    canvas.restore();
                    canvas.save();
                    canvas.clipRect(0, firstLineY - translateY, measuredWidth, (int) (itemHeight));
                    canvas.drawText(as[j1], getTextX(as[j1], paintCenterText, tempRect), maxTextHeight, paintCenterText);
                    canvas.restore();
                } else if (translateY <= secondLineY && maxTextHeight + translateY >= secondLineY) {
                    // 条目经过第二条线
                    canvas.save();
                    canvas.clipRect(0, 0, measuredWidth, secondLineY - translateY);
                    canvas.drawText(as[j1], getTextX(as[j1], paintCenterText, tempRect), maxTextHeight, paintCenterText);
                    canvas.restore();
                    canvas.save();
                    canvas.clipRect(0, secondLineY - translateY, measuredWidth, (int) (itemHeight));
                    canvas.drawText(as[j1], getTextX(as[j1], paintOuterText, tempRect), maxTextHeight, paintOuterText);
                    canvas.restore();
                } else if (translateY >= firstLineY && maxTextHeight + translateY <= secondLineY) {
                    // 中间条目
                    canvas.clipRect(0, 0, measuredWidth, (int) (itemHeight));
                    canvas.drawText(as[j1], getTextX(as[j1], paintCenterText, tempRect), maxTextHeight, paintCenterText);
                    selectedItem = items.indexOf(as[j1]);
                } else {
                    // 其他条目
                    canvas.clipRect(0, 0, measuredWidth, (int) (itemHeight));
                    canvas.drawText(as[j1], getTextX(as[j1], paintOuterText, tempRect), maxTextHeight, paintOuterText);
                }
                canvas.restore();
            }
            j1++;
        }
    }

    // 绘制文字起始位置
    private int getTextX(String a, Paint paint, Rect rect) {
        paint.getTextBounds(a, 0, a.length(), rect);
        // 获取到的是实际文字宽度
        int textWidth = rect.width();
        // 转换成绘制文字宽度
        textWidth *= scaleX;
        return (measuredWidth - textWidth) / 2;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        remeasure();
        setMeasuredDimension(measuredWidth, measuredHeight);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        boolean eventConsumed = gestureDetector.onTouchEvent(event);
        float itemHeight = lineSpacingMultiplier * maxTextHeight;

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                startTime = System.currentTimeMillis();
                cancelFuture();
                previousY = event.getRawY();
                break;

            case MotionEvent.ACTION_MOVE:
                float dy = previousY - event.getRawY();
                previousY = event.getRawY();

                totalScrollY = (int) (totalScrollY + dy);

                // 边界处理。
                if (!isLoop) {
                    float top = -initPosition * itemHeight;
                    float bottom = (items.size() - 1 - initPosition) * itemHeight;

                    if (totalScrollY < top) {
                        totalScrollY = (int) top;
                    } else if (totalScrollY > bottom) {
                        totalScrollY = (int) bottom;
                    }
                }
                break;

            case MotionEvent.ACTION_UP:
            default:
                if (!eventConsumed) {
                    float y = event.getY();
                    double l = Math.acos((radius - y) / radius) * radius;
                    int circlePosition = (int) ((l + itemHeight / 2) / itemHeight);

                    float extraOffset = (totalScrollY % itemHeight + itemHeight) % itemHeight;
                    mOffset = (int) ((circlePosition - itemsVisible / 2) * itemHeight - extraOffset);

                    if ((System.currentTimeMillis() - startTime) > 120) {
                        // 处理拖拽事件
                        smoothScroll(ACTION.DAGGLE);
                    } else {
                        // 处理条目点击事件
                        smoothScroll(ACTION.CLICK);
                    }
                }
                break;
        }

        invalidate();
        return true;
    }
}
// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.szcomtop.meal.views.wheelView;

import android.view.MotionEvent;

// Referenced classes of package com.qingchifan.view:
//            LoopView

final class LoopViewGestureListener extends android.view.GestureDetector.SimpleOnGestureListener {

    final LoopView loopView;

    LoopViewGestureListener(LoopView loopview) {
        loopView = loopview;
    }

    @Override
    public final boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
        loopView.scrollBy(velocityY);
        return true;
    }
}
// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.szcomtop.meal.views.wheelView;

import android.os.Handler;
import android.os.Message;

// Referenced classes of package com.qingchifan.view:
//            LoopView

final class MessageHandler extends Handler {
    public static final int WHAT_INVALIDATE_LOOP_VIEW = 1000;
    public static final int WHAT_SMOOTH_SCROLL = 2000;
    public static final int WHAT_ITEM_SELECTED = 3000;

    final LoopView loopview;

    MessageHandler(LoopView loopview) {
        this.loopview = loopview;
    }

    @Override
    public final void handleMessage(Message msg) {
        switch (msg.what) {
            case WHAT_INVALIDATE_LOOP_VIEW:
                loopview.invalidate();
                break;

            case WHAT_SMOOTH_SCROLL:
                loopview.smoothScroll(LoopView.ACTION.FLING);
                break;

            case WHAT_ITEM_SELECTED:
                loopview.onItemSelected();
                break;
        }
    }

}
// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.szcomtop.meal.views.wheelView;


public interface OnItemSelectedListener {
    void onItemSelected(int index);
}
// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.szcomtop.meal.views.wheelView;

// Referenced classes of package com.qingchifan.view:
//            LoopView, OnItemSelectedListener

final class OnItemSelectedRunnable implements Runnable {
    final LoopView loopView;

    OnItemSelectedRunnable(LoopView loopview) {
        loopView = loopview;
    }

    @Override
    public final void run() {
        loopView.onItemSelectedListener.onItemSelected(loopView.getSelectedItem());
    }
}
// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.szcomtop.meal.views.wheelView;

import java.util.TimerTask;

final class SmoothScrollTimerTask extends TimerTask {

    int realTotalOffset;
    int realOffset;
    int offset;
    final LoopView loopView;

    SmoothScrollTimerTask(LoopView loopview, int offset) {
        this.loopView = loopview;
        this.offset = offset;
        realTotalOffset = Integer.MAX_VALUE;
        realOffset = 0;
    }

    @Override
    public final void run() {
        if (realTotalOffset == Integer.MAX_VALUE) {
            realTotalOffset = offset;
        }
        realOffset = (int) ((float) realTotalOffset * 0.1F);

        if (realOffset == 0) {
            if (realTotalOffset < 0) {
                realOffset = -1;
            } else {
                realOffset = 1;
            }
        }
        if (Math.abs(realTotalOffset) <= 0) {
            loopView.cancelFuture();
            loopView.handler.sendEmptyMessage(MessageHandler.WHAT_ITEM_SELECTED);
        } else {
            loopView.totalScrollY = loopView.totalScrollY + realOffset;
            loopView.handler.sendEmptyMessage(MessageHandler.WHAT_INVALIDATE_LOOP_VIEW);
            realTotalOffset = realTotalOffset - realOffset;
        }
    }
}
